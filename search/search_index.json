{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"SQLAlchemy CRUD Plus","text":"<p>\u57fa\u4e8e SQLAlchemy 2.0 \u6784\u5efa\u7684\u9ad8\u7ea7\u5f02\u6b65 CRUD SDK</p>"},{"location":"#_1","title":"\u7279\u6027","text":"<ul> <li>\u7b80\u5316\u7684 CRUD \u64cd\u4f5c - \u7edf\u4e00\u7684 API \u63a5\u53e3\uff0c\u652f\u6301\u6279\u91cf\u64cd\u4f5c</li> <li>\u5173\u7cfb\u67e5\u8be2\u652f\u6301 - \u9884\u52a0\u8f7d\u7b56\u7565\u548c JOIN \u67e5\u8be2\uff0c\u907f\u514d N+1 \u95ee\u9898</li> <li>\u4e30\u5bcc\u7684\u8fc7\u6ee4\u6761\u4ef6 - \u652f\u6301 30+ \u79cd\u8fc7\u6ee4\u64cd\u4f5c\u7b26</li> <li>\u7c7b\u578b\u5b89\u5168 - \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a\u652f\u6301</li> <li>\u5f02\u6b65\u652f\u6301 - \u57fa\u4e8e SQLAlchemy 2.0 \u5f02\u6b65\u5f15\u64ce</li> <li>\u590d\u5408\u4e3b\u952e\u652f\u6301 - \u652f\u6301\u591a\u5b57\u6bb5\u4e3b\u952e\u64cd\u4f5c</li> </ul>"},{"location":"#_2","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install sqlalchemy-crud-plus\n</code></pre>"},{"location":"#_4","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from sqlalchemy_crud_plus import CRUDPlus\n\n# \u521b\u5efa CRUD \u5b9e\u4f8b\nuser_crud = CRUDPlus(User)\n\n# \u521b\u5efa\u8bb0\u5f55\nuser = await user_crud.create_model(session, user_data)\n\n# \u67e5\u8be2\u8bb0\u5f55\nuser = await user_crud.select_model(session, pk=1)\nusers = await user_crud.select_models(session, is_active=True)\n\n# \u66f4\u65b0\u8bb0\u5f55\nawait user_crud.update_model(session, pk=1, obj=update_data)\n\n# \u5220\u9664\u8bb0\u5f55\nawait user_crud.delete_model(session, pk=1)\n\n# \u8fc7\u6ee4\u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    name__like='%admin%',\n    age__ge=18,\n    email__endswith='@example.com'\n)\n\n# \u5173\u7cfb\u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    load_strategies=['posts', 'profile']\n)\n</code></pre>"},{"location":"#_5","title":"\u6587\u6863\u5bfc\u822a","text":"<ul> <li>\u5b89\u88c5\u6307\u5357 - \u73af\u5883\u51c6\u5907\u548c\u4f9d\u8d56\u5b89\u88c5</li> <li>\u5feb\u901f\u5f00\u59cb - \u57fa\u7840\u7528\u6cd5\u793a\u4f8b</li> <li>\u57fa\u7840 CRUD - \u589e\u5220\u6539\u67e5\u64cd\u4f5c\u8be6\u89e3</li> <li>\u8fc7\u6ee4\u6761\u4ef6 - \u67e5\u8be2\u8fc7\u6ee4\u64cd\u4f5c\u7b26</li> <li>\u5173\u7cfb\u67e5\u8be2 - \u9884\u52a0\u8f7d\u548c JOIN \u67e5\u8be2</li> <li>\u4e8b\u52a1\u63a7\u5236 - \u4e8b\u52a1\u7ba1\u7406</li> <li>API \u53c2\u8003 - \u5b8c\u6574 API \u6587\u6863</li> </ul>"},{"location":"changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"changelog/#1121-2025-10-11","title":"1.12.1 - 2025-10-11","text":""},{"location":"changelog/#whats-changed","title":"What's Changed","text":"<ul> <li>Update changelog for 1.12.0 by @wu-clan in #62</li> <li>Update DML execution result type cast by @wu-clan in #67</li> <li>Prepare for 1.12.1 release by @wu-clan in #68</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.12.0...1.12.1</p> <p>Changes</p> <p></p>"},{"location":"changelog/#1120-2025-09-04","title":"1.12.0 - 2025-09-04","text":""},{"location":"changelog/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Update changelog for 1.11.0 by @wu-clan in #58</li> <li>Add deleted time column for logical deletion by @wu-clan in #60</li> <li>Prepare for 1.12.0 release by @wu-clan in #61</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.11.0...1.12.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#1110-2025-08-31","title":"1.11.0 - 2025-08-31","text":""},{"location":"changelog/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Update changelog for v1.10.0 by @wu-clan in #52</li> <li>Add bulk create and update methods by @wu-clan in #53</li> <li>Add the join condition onclause support by @wu-clan in #54</li> <li>Optimize document layout and content by @wu-clan in #55</li> <li>Prepare for 1.11.0 release by @wu-clan in #56</li> <li>Update pyproject to dynamic version number by @wu-clan in #57</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/v1.10.0...1.11.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#1100-v1100-2025-06-16","title":"1.10.0 (v1.10.0) - 2025-06-16","text":""},{"location":"changelog/#whats-changed_3","title":"What's Changed","text":"<ul> <li>Update changelog for 1.9.0 by @wu-clan in #46</li> <li>Simplify or related operations by @wu-clan in #48</li> <li>Optimize code structure and test cases by @wu-clan in #49</li> <li>Add support for relationship select by @wu-clan in #50</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.9.0...v1.10.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#190-2025-05-05","title":"1.9.0 - 2025-05-05","text":""},{"location":"changelog/#whats-changed_4","title":"What's Changed","text":"<ul> <li>Update changelog for 1.8.0 by @wu-clan in #42</li> <li>Add composite primary key support by @wu-clan in #44</li> <li>Prepare for 1.9.0 release by @wu-clan in #45</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.8.0...1.9.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#180-2025-04-27","title":"1.8.0 - 2025-04-27","text":""},{"location":"changelog/#whats-changed_5","title":"What's Changed","text":"<ul> <li>Update changelog for 1.7.0 by @wu-clan in #39</li> <li>Add where clause support to select by @wu-clan in #40</li> <li>Prepare for 1.8.0 release by @wu-clan in #41</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.7.0...1.8.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#170-2025-04-13","title":"1.7.0 - 2025-04-13","text":""},{"location":"changelog/#whats-changed_6","title":"What's Changed","text":"<ul> <li>Update website and repository url by @wu-clan in #34</li> <li>Add count and exists usages by @wu-clan in #37</li> <li>Prepare for 1.7.0 release by @wu-clan in #38</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.6.0...1.7.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#160-2024-11-09","title":"1.6.0 - 2024-11-09","text":""},{"location":"changelog/#whats-changed_7","title":"What's Changed","text":"<ul> <li>Add the flush usage by @wu-clan in #32</li> <li>Prepare for 1.6.0 release by @wu-clan in #33</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.5.0...1.6.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#150-2024-11-03","title":"1.5.0 - 2024-11-03","text":""},{"location":"changelog/#whats-changed_8","title":"What's Changed","text":"<ul> <li>Update some usage documents by @wu-clan in #27</li> <li>Update the interactive link address by @wu-clan in #28</li> <li>update interactive link descriptions by @wu-clan in #29</li> <li>Update package manager pdm to uv by @wu-clan in #31</li> <li>Add create and update kwargs usage by @wu-clan in #30</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.4.0...1.5.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v140-2024-08-27","title":"v1.4.0 - 2024-08-27","text":""},{"location":"changelog/#whats-changed_9","title":"What's Changed","text":"<ul> <li>Add lint and test ci by @wu-clan in #24</li> <li>Fix the cache for docs ci by @wu-clan in #25</li> <li>Update model primary key for dynamic retrieval by @DavidSche in #23</li> <li>Prepare for 1.4.0 release by @wu-clan in #26</li> </ul>"},{"location":"changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@DavidSche made their first contribution in #23</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.3.0...1.4.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v130-2024-08-25","title":"v1.3.0 - 2024-08-25","text":""},{"location":"changelog/#whats-changed_10","title":"What's Changed","text":"<ul> <li>Add mor and __gor__ filters  by @wu-clan in #21</li> <li>Prepare for 1.3.0 release by @wu-clan in #22</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.2.0...1.3.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v120-2024-08-24","title":"v1.2.0 - 2024-08-24","text":""},{"location":"changelog/#whats-changed_11","title":"What's Changed","text":"<ul> <li>Add select and sort constructors by @wu-clan in #19</li> <li>Prepare for 1.2.0 release by @wu-clan in #20</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.1.0...1.2.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v110-2024-08-24","title":"v1.1.0 - 2024-08-24","text":""},{"location":"changelog/#whats-changed_12","title":"What's Changed","text":"<ul> <li>Add mkdocs usage documentation by @wu-clan in #12</li> <li>Update some async functions definition by @wu-clan in #13</li> <li>Update ci for build docs by @wu-clan in #14</li> <li>Fix ci install pngquant user by @wu-clan in #15</li> <li>Fix docs ci run pip by @wu-clan in #16</li> <li>Prepare for 1.1.0 release by @wu-clan in #17</li> <li>Add ci for change logs by @wu-clan in #18</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.0.0...1.1.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v100-2024-08-12","title":"v1.0.0 - 2024-08-12","text":""},{"location":"changelog/#major-event","title":"Major Event","text":"<p>CRUD methods have been refactored, check out the documentation for new usage!</p>"},{"location":"changelog/#whats-changed_13","title":"What's Changed","text":"<ul> <li>Refactor code to enhance selection and operations by @wu-clan in #9</li> <li>Prepare for 1.0.0 release by @wu-clan in #11</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/0.0.4...1.0.0</p> <p>Changes</p> <p></p>"},{"location":"changelog/#v004-2024-08-09","title":"v0.0.4 - 2024-08-09","text":""},{"location":"changelog/#whats-changed_14","title":"What's Changed","text":"<ul> <li>Add pep561 support to the library by @wu-clan in #7</li> <li>Add commit option to CRUD operations by @wu-clan in #8</li> <li>Prepare for 0.0.4 release by @wu-clan in #10</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/0.0.3...0.0.4</p> <p>Changes</p>"},{"location":"installing/","title":"\u5b89\u88c5\u6307\u5357","text":""},{"location":"installing/#_2","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python 3.10+</li> <li>SQLAlchemy 2.0+</li> <li>Pydantic 2.0+</li> </ul>"},{"location":"installing/#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install sqlalchemy-crud-plus\n</code></pre>"},{"location":"installing/#_4","title":"\u7248\u672c\u517c\u5bb9\u6027","text":"<p>\u786e\u4fdd SQLAlchemy \u7248\u672c\u4e3a 2.0+\uff1a</p> <pre><code>pip install --upgrade sqlalchemy&gt;=2.0.0\n</code></pre>"},{"location":"installing/#_5","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u67e5\u770b\uff1a</p> <ul> <li>\u5feb\u901f\u5f00\u59cb - 5\u5206\u949f\u4e0a\u624b\u6307\u5357</li> <li>\u57fa\u7840\u7528\u6cd5 - CRUD \u64cd\u4f5c\u8be6\u89e3</li> </ul>"},{"location":"advanced/filter/","title":"\u8fc7\u6ee4\u6761\u4ef6","text":"<p>SQLAlchemy CRUD Plus \u652f\u6301 30+ \u79cd\u8fc7\u6ee4\u64cd\u4f5c\u7b26\uff0c\u7528\u4e8e\u6784\u5efa\u590d\u6742\u7684\u67e5\u8be2\u6761\u4ef6\u3002</p>"},{"location":"advanced/filter/#_2","title":"\u57fa\u7840\u7528\u6cd5","text":"<pre><code># \u4f7f\u7528\u8fc7\u6ee4\u6761\u4ef6\u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    name=\"\u5f20\u4e09\",  # \u7b49\u4e8e\n    age__gt=18,  # \u5927\u4e8e\n    email__like=\"%@qq.com\"  # \u6a21\u7cca\u5339\u914d\n)\n</code></pre>"},{"location":"advanced/filter/#_3","title":"\u6bd4\u8f83\u64cd\u4f5c\u7b26","text":"<pre><code># \u6570\u503c\u6bd4\u8f83\nusers = await user_crud.select_models(\n    session,\n    age__gt=30,  # \u5927\u4e8e 30\n    age__ge=18,  # \u5927\u4e8e\u7b49\u4e8e 18\n    age__lt=65,  # \u5c0f\u4e8e 65\n    age__le=60,  # \u5c0f\u4e8e\u7b49\u4e8e 60\n    id__eq=1,  # \u7b49\u4e8e 1\n    status__ne=0  # \u4e0d\u7b49\u4e8e 0\n)\n</code></pre>"},{"location":"advanced/filter/#_4","title":"\u8303\u56f4\u64cd\u4f5c\u7b26","text":"<pre><code># \u5305\u542b\u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    id__in=[1, 2, 3, 4, 5],  # ID \u5728\u5217\u8868\u4e2d\n    status__not_in=[0, -1],  # \u72b6\u6001\u4e0d\u5728\u5217\u8868\u4e2d\n    age__between=[18, 65]  # \u5e74\u9f84\u5728 18-65 \u4e4b\u95f4\n)\n</code></pre>"},{"location":"advanced/filter/#_5","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u7b26","text":"<pre><code># \u5b57\u7b26\u4e32\u5339\u914d\nusers = await user_crud.select_models(\n    session,\n    name__like='%\u5f20%',  # \u5305\u542b\"\u5f20\"\n    name__not_like='%test%',  # \u4e0d\u5305\u542b\"test\"\n    name__ilike='%ADMIN%',  # \u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5305\u542b\n    email__startswith='admin',  # \u4ee5\"admin\"\u5f00\u5934\n    email__endswith='@qq.com',  # \u4ee5\"@qq.com\"\u7ed3\u5c3e\n    bio__contains='\u7a0b\u5e8f\u5458',  # \u5305\u542b\"\u7a0b\u5e8f\u5458\"\n)\n</code></pre>"},{"location":"advanced/filter/#_6","title":"\u7a7a\u503c\u68c0\u67e5","text":"<pre><code># NULL \u503c\u5904\u7406\nusers = await user_crud.select_models(\n    session,\n    deleted_at__is=None,  # \u4e3a NULL\n    profile_id__is_not=None,  # \u4e0d\u4e3a NULL\n)\n</code></pre>"},{"location":"advanced/filter/#or","title":"OR \u6761\u4ef6\u67e5\u8be2","text":""},{"location":"advanced/filter/#_7","title":"\u540c\u5b57\u6bb5\u591a\u503c","text":"<pre><code># \u90ae\u7bb1\u57df\u540d\u4e3a gmail.com \u6216 qq.com \u7684\u7528\u6237\nusers = await user_crud.select_models(\n    session,\n    __or__={\n        'email__endswith': ['@gmail.com', '@qq.com']\n    }\n)\n</code></pre>"},{"location":"advanced/filter/#_8","title":"\u4e0d\u540c\u5b57\u6bb5\u6761\u4ef6","text":"<pre><code># \u540d\u5b57\u5305\u542b\"\u5f20\"\u6216\u90ae\u7bb1\u4ee5admin\u5f00\u5934\u7684\u7528\u6237\nusers = await user_crud.select_models(\n    session,\n    __or__={\n        'name__like': '%\u5f20%',\n        'email__startswith': 'admin'\n    }\n)\n</code></pre>"},{"location":"advanced/filter/#or_1","title":"\u590d\u6742 OR \u6761\u4ef6","text":"<pre><code># \u591a\u79cd\u6761\u4ef6\u7ec4\u5408\nusers = await user_crud.select_models(\n    session,\n    is_active=True,  # \u5fc5\u987b\u662f\u6d3b\u8dc3\u7528\u6237\n    __or__={\n        'level__ge': 5,  # \u7b49\u7ea7\u5927\u4e8e\u7b49\u4e8e5\n        'is_vip': True,  # \u6216\u8005\u662fVIP\n        'total_spent__gt': 1000  # \u6216\u8005\u6d88\u8d39\u5927\u4e8e1000\n    }\n)\n</code></pre>"},{"location":"advanced/filter/#_9","title":"\u64cd\u4f5c\u7b26\u53c2\u8003","text":""},{"location":"advanced/filter/#_10","title":"\u6bd4\u8f83\u64cd\u4f5c\u7b26","text":"\u64cd\u4f5c\u7b26 \u8bf4\u660e \u793a\u4f8b <code>__gt</code> \u5927\u4e8e <code>age__gt=18</code> <code>__ge</code> \u5927\u4e8e\u7b49\u4e8e <code>age__ge=18</code> <code>__lt</code> \u5c0f\u4e8e <code>age__lt=65</code> <code>__le</code> \u5c0f\u4e8e\u7b49\u4e8e <code>age__le=65</code> <code>__eq</code> \u7b49\u4e8e <code>id__eq=1</code> <code>__ne</code> \u4e0d\u7b49\u4e8e <code>status__ne=0</code>"},{"location":"advanced/filter/#_11","title":"\u5305\u542b\u64cd\u4f5c\u7b26","text":"\u64cd\u4f5c\u7b26 \u8bf4\u660e \u793a\u4f8b <code>__in</code> \u5728\u5217\u8868\u4e2d <code>id__in=[1,2,3]</code> <code>__not_in</code> \u4e0d\u5728\u5217\u8868\u4e2d <code>id__not_in=[1,2,3]</code> <code>__between</code> \u5728\u8303\u56f4\u5185 <code>age__between=[18,65]</code>"},{"location":"advanced/filter/#_12","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u7b26","text":"\u64cd\u4f5c\u7b26 \u8bf4\u660e \u793a\u4f8b <code>__like</code> \u6a21\u7cca\u5339\u914d <code>name__like='%\u5f20%'</code> <code>__not_like</code> \u6a21\u7cca\u4e0d\u5339\u914d <code>name__not_like='%test%'</code> <code>__ilike</code> \u4e0d\u533a\u5206\u5927\u5c0f\u5199\u6a21\u7cca\u5339\u914d <code>name__ilike='%ZHANG%'</code> <code>__not_ilike</code> \u4e0d\u533a\u5206\u5927\u5c0f\u5199\u6a21\u7cca\u4e0d\u5339\u914d <code>name__not_ilike='%TEST%'</code> <code>__startswith</code> \u5f00\u5934\u5339\u914d <code>email__startswith='admin'</code> <code>__endswith</code> \u7ed3\u5c3e\u5339\u914d <code>email__endswith='@qq.com'</code> <code>__contains</code> \u5305\u542b <code>name__contains='\u5f20'</code>"},{"location":"advanced/filter/#_13","title":"\u7a7a\u503c\u64cd\u4f5c\u7b26","text":"\u64cd\u4f5c\u7b26 \u8bf4\u660e \u793a\u4f8b <code>__is</code> \u4e3a\u7a7a\u68c0\u67e5 <code>deleted_at__is=None</code> <code>__is_not</code> \u4e0d\u4e3a\u7a7a\u68c0\u67e5 <code>deleted_at__is_not=None</code>"},{"location":"advanced/filter/#_14","title":"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"advanced/filter/#_15","title":"\u7528\u6237\u641c\u7d22\u529f\u80fd","text":"<pre><code>async def search_users(\n        session: AsyncSession,\n        keyword: str = None,\n        age_min: int = None,\n        age_max: int = None,\n        is_active: bool = None\n):\n    filters = {}\n\n    # \u5173\u952e\u8bcd\u641c\u7d22\uff08\u59d3\u540d\u6216\u90ae\u7bb1\uff09\n    if keyword:\n        filters['__or__'] = {\n            'name__like': f'%{keyword}%',\n            'email__like': f'%{keyword}%'\n        }\n\n    # \u5e74\u9f84\u8303\u56f4\n    if age_min is not None:\n        filters['age__ge'] = age_min\n    if age_max is not None:\n        filters['age__le'] = age_max\n\n    # \u72b6\u6001\u7b5b\u9009\n    if is_active is not None:\n        filters['is_active'] = is_active\n\n    return await user_crud.select_models(session, **filters)\n</code></pre>"},{"location":"advanced/filter/#_16","title":"\u9ad8\u7ea7\u7b5b\u9009","text":"<pre><code># \u67e5\u627e\u6d3b\u8dc3\u7684\u9ad8\u7ea7\u7528\u6237\nusers = await user_crud.select_models(\n    session,\n    is_active=True,\n    created_at__ge='2024-01-01',\n    __or__={\n        'level__ge': 5,\n        'is_vip': True,\n        'total_orders__gt': 10\n    }\n)\n</code></pre>"},{"location":"advanced/filter/#_17","title":"\u590d\u5408\u4e3b\u952e\u652f\u6301","text":"<p>SQLAlchemy CRUD Plus \u81ea\u52a8\u68c0\u6d4b\u6a21\u578b\u4e3b\u952e\uff0c\u652f\u6301\u5355\u4e2a\u4e3b\u952e\u548c\u590d\u5408\u4e3b\u952e\u3002</p>"},{"location":"advanced/filter/#_18","title":"\u590d\u5408\u4e3b\u952e\u6a21\u578b","text":"<pre><code>class UserRole(Base):\n    __tablename__ = 'user_roles'\n\n    # \u590d\u5408\u4e3b\u952e\n    user_id: Mapped[int] = mapped_column(primary_key=True)\n    role_id: Mapped[int] = mapped_column(primary_key=True)\n    assigned_at: Mapped[datetime] = mapped_column(DateTime)\n</code></pre>"},{"location":"advanced/filter/#_19","title":"\u590d\u5408\u4e3b\u952e\u64cd\u4f5c","text":"<pre><code># \u521b\u5efa\nuser_role_data = {\"user_id\": 1, \"role_id\": 2}\nuser_role = await user_role_crud.create_model(session, user_role_data)\n\n# \u67e5\u8be2\uff08\u4f7f\u7528\u5143\u7ec4\uff09\nuser_role = await user_role_crud.select_model(session, pk=(1, 2))\n\n# \u66f4\u65b0\nawait user_role_crud.update_model(\n    session,\n    pk=(1, 2),\n    obj={\"assigned_at\": datetime.now()}\n)\n\n# \u5220\u9664\nawait user_role_crud.delete_model(session, pk=(1, 2))\n\n# \u6279\u91cf\u67e5\u8be2\nuser_roles = await user_role_crud.select_models(session, user_id=1)\n</code></pre>"},{"location":"advanced/filter/#_20","title":"\u6027\u80fd\u5efa\u8bae","text":""},{"location":"advanced/filter/#_21","title":"\u7d22\u5f15\u4f18\u5316","text":"<pre><code># \u4e3a\u5e38\u7528\u67e5\u8be2\u5b57\u6bb5\u521b\u5efa\u7d22\u5f15\nclass User(Base):\n    __tablename__ = 'users'\n\n    email: Mapped[str] = mapped_column(String(100), unique=True, index=True)\n    is_active: Mapped[bool] = mapped_column(default=True, index=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, index=True)\n\n    # \u590d\u5408\u7d22\u5f15\n    __table_args__ = (\n        Index('idx_user_active_created', 'is_active', 'created_at'),\n    )\n</code></pre>"},{"location":"advanced/filter/#_22","title":"\u67e5\u8be2\u4f18\u5316\u6280\u5de7","text":"<pre><code># \u4f7f\u7528 exists \u68c0\u67e5\u5b58\u5728\u6027\uff08\u66f4\u9ad8\u6548\uff09\nexists = await user_crud.exists(session, email=\"test@example.com\")\n\n# \u4f7f\u7528 limit \u9650\u5236\u7ed3\u679c\u96c6\nrecent_users = await user_crud.select_models(\n    session,\n    created_at__ge=datetime.now() - timedelta(days=7),\n    limit=100\n)\n\n# \u907f\u514d\u524d\u7f00\u901a\u914d\u7b26\uff08\u4f4e\u6548\uff09\n# \u4e0d\u63a8\u8350: name__like='%\u5f20%'\n# \u63a8\u8350: name__like='\u5f20%'\n</code></pre>"},{"location":"advanced/filter/#_23","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u53c2\u6570\u547d\u540d: \u4e3b\u952e\u53c2\u6570\u4f7f\u7528 <code>pk</code>\uff0c\u907f\u514d\u4e0e Python \u5173\u952e\u5b57 <code>id</code> \u51b2\u7a81</li> <li>\u81ea\u52a8\u4e3b\u952e\u68c0\u6d4b: \u652f\u6301\u5404\u79cd\u4e3b\u952e\u7c7b\u578b\uff0c\u5305\u62ec\u5b57\u7b26\u4e32\u4e3b\u952e\u548c\u590d\u5408\u4e3b\u952e</li> <li>\u6027\u80fd\u8003\u8651: \u4e3a\u5e38\u7528\u8fc7\u6ee4\u5b57\u6bb5\u521b\u5efa\u6570\u636e\u5e93\u7d22\u5f15</li> <li>OR \u67e5\u8be2: \u8fc7\u591a OR \u6761\u4ef6\u53ef\u80fd\u5f71\u54cd\u6027\u80fd\uff0c\u5408\u7406\u4f7f\u7528</li> <li>\u901a\u914d\u7b26: \u907f\u514d\u4ee5\u901a\u914d\u7b26\u5f00\u5934\u7684 LIKE \u67e5\u8be2</li> </ol>"},{"location":"advanced/filter/#_24","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u5173\u7cfb\u67e5\u8be2 - \u5b66\u4e60\u8868\u5173\u7cfb\u5904\u7406</li> <li>\u4e8b\u52a1\u63a7\u5236 - \u638c\u63e1\u4e8b\u52a1\u7ba1\u7406</li> </ul>"},{"location":"advanced/transaction/","title":"\u4e8b\u52a1\u63a7\u5236","text":"<p>SQLAlchemy CRUD Plus \u57fa\u4e8e SQLAlchemy 2.0 \u7684\u73b0\u4ee3\u4e8b\u52a1\u7ba1\u7406\u6a21\u5f0f\uff0c\u63d0\u4f9b\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u4e8b\u52a1\u63a7\u5236\u529f\u80fd\u3002</p>"},{"location":"advanced/transaction/#_2","title":"\u57fa\u7840\u4e8b\u52a1\u6a21\u5f0f","text":""},{"location":"advanced/transaction/#_3","title":"\u81ea\u52a8\u4e8b\u52a1\u7ba1\u7406\uff08\u63a8\u8350\uff09","text":"<pre><code># \u63a8\u8350\u7684\u4e8b\u52a1\u6a21\u5f0f\nasync with async_session.begin() as session:\n    # \u5728\u8fd9\u4e2a\u5757\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\n    user_data = UserCreate(name=\"\u5f20\u4e09\", email=\"zhangsan@example.com\")\n    user = await user_crud.create_model(session, user_data)\n\n    # \u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u4e8b\u52a1\u4f1a\u81ea\u52a8\u63d0\u4ea4\n    # \u5982\u679c\u6709\u5f02\u5e38\uff0c\u4e8b\u52a1\u4f1a\u81ea\u52a8\u56de\u6eda\n</code></pre>"},{"location":"advanced/transaction/#_4","title":"\u624b\u52a8\u4e8b\u52a1\u63a7\u5236","text":"<pre><code>async with async_session() as session:\n    try:\n        # \u5f00\u59cb\u4e8b\u52a1\n        await session.begin()\n\n        user_data = UserCreate(name=\"\u674e\u56db\", email=\"lisi@example.com\")\n        user = await user_crud.create_model(session, user_data)\n\n        # \u624b\u52a8\u63d0\u4ea4\n        await session.commit()\n\n    except Exception as e:\n        # \u624b\u52a8\u56de\u6eda\n        await session.rollback()\n        raise e\n</code></pre>"},{"location":"advanced/transaction/#flush-commit","title":"flush \u548c commit","text":""},{"location":"advanced/transaction/#flush","title":"flush \u53c2\u6570","text":"<p><code>flush=True</code> \u5c06\u66f4\u6539\u53d1\u9001\u5230\u6570\u636e\u5e93\u4f46\u4e0d\u63d0\u4ea4\u4e8b\u52a1\uff0c\u4e3b\u8981\u7528\u4e8e\u83b7\u53d6\u81ea\u52a8\u751f\u6210\u7684\u4e3b\u952e\u3002</p> <pre><code>async with async_session.begin() as session:\n    # \u521b\u5efa\u7528\u6237\u5e76\u7acb\u5373\u83b7\u53d6\u4e3b\u952e\n    user_data = UserCreate(name=\"\u5f20\u4e09\", email=\"zhangsan@example.com\")\n    user = await user_crud.create_model(session, user_data, flush=True)\n\n    # \u6b64\u65f6 user.id \u5df2\u53ef\u7528\uff0c\u53ef\u7528\u4e8e\u5173\u8054\u64cd\u4f5c\n    profile_data = ProfileCreate(user_id=user.id, bio=\"\u7528\u6237\u7b80\u4ecb\")\n    profile = await profile_crud.create_model(session, profile_data)\n\n    # \u4e8b\u52a1\u5728 with \u5757\u7ed3\u675f\u65f6\u81ea\u52a8\u63d0\u4ea4\n</code></pre> <p>\u4f7f\u7528\u573a\u666f\uff1a - \u9700\u8981\u83b7\u53d6\u81ea\u52a8\u751f\u6210\u7684\u4e3b\u952e - \u5728\u540c\u4e00\u4e8b\u52a1\u4e2d\u521b\u5efa\u5173\u8054\u8bb0\u5f55 - \u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u68c0\u67e5</p>"},{"location":"advanced/transaction/#commit","title":"commit \u53c2\u6570","text":"<p><code>commit=True</code> \u7acb\u5373\u63d0\u4ea4\u4e8b\u52a1\uff0c\u9002\u7528\u4e8e\u72ec\u7acb\u7684\u5355\u4e2a\u64cd\u4f5c\u3002</p> <pre><code># \u72ec\u7acb\u64cd\u4f5c\uff0c\u7acb\u5373\u63d0\u4ea4\nuser_data = UserCreate(name=\"\u674e\u56db\", email=\"lisi@example.com\")\nuser = await user_crud.create_model(session, user_data, commit=True)\n\n# \u9002\u7528\u4e8e\u5355\u4e2a\u64cd\u4f5c\nawait user_crud.update_model(session, pk=1, obj={\"name\": \"\u65b0\u540d\u79f0\"}, commit=True)\nawait user_crud.delete_model(session, pk=1, commit=True)\n</code></pre> <p>\u4f7f\u7528\u573a\u666f\uff1a - \u72ec\u7acb\u7684\u5355\u4e2a\u64cd\u4f5c - \u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u64cd\u4f5c\u7ec4\u5408 - \u7b80\u5316\u4ee3\u7801\u7ed3\u6784</p>"},{"location":"advanced/transaction/#_5","title":"\u590d\u6742\u4e8b\u52a1\u573a\u666f","text":""},{"location":"advanced/transaction/#_6","title":"\u591a\u8868\u64cd\u4f5c\u4e8b\u52a1","text":"<pre><code>async with async_session.begin() as session:\n    # \u521b\u5efa\u7528\u6237\uff08\u4f7f\u7528 flush \u83b7\u53d6\u4e3b\u952e\uff09\n    user_data = UserCreate(name=\"\u738b\u4e94\", email=\"wangwu@example.com\")\n    user = await user_crud.create_model(session, user_data, flush=True)\n\n    # \u521b\u5efa\u4e2a\u4eba\u8d44\u6599\uff08\u4f7f\u7528\u83b7\u53d6\u5230\u7684\u7528\u6237\u4e3b\u952e\uff09\n    profile_data = ProfileCreate(user_id=user.id, bio=\"\u4e2a\u4eba\u7b80\u4ecb\")\n    profile = await profile_crud.create_model(session, profile_data)\n\n    # \u521b\u5efa\u6587\u7ae0\n    post_data = PostCreate(\n        title=\"\u6211\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\",\n        content=\"\u6587\u7ae0\u5185\u5bb9...\",\n        author_id=user.id\n    )\n    post = await post_crud.create_model(session, post_data)\n\n    # \u6240\u6709\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u56de\u6eda\n</code></pre>"},{"location":"advanced/transaction/#_7","title":"\u6761\u4ef6\u4e8b\u52a1","text":"<pre><code>async with async_session.begin() as session:\n    # \u68c0\u67e5\u7528\u6237\u662f\u5426\u5b58\u5728\n    existing_user = await user_crud.select_model_by_column(\n        session, email=\"test@example.com\"\n    )\n\n    if existing_user:\n        # \u66f4\u65b0\u73b0\u6709\u7528\u6237\n        user_update = UserUpdate(last_login=datetime.now())\n        await user_crud.update_model(\n            session, pk=existing_user.id, obj=user_update\n        )\n        user = existing_user\n    else:\n        # \u521b\u5efa\u65b0\u7528\u6237\n        user_data = UserCreate(\n            name=\"\u65b0\u7528\u6237\",\n            email=\"test@example.com\"\n        )\n        user = await user_crud.create_model(session, user_data)\n\n    return user\n</code></pre>"},{"location":"advanced/transaction/#_8","title":"\u5d4c\u5957\u4e8b\u52a1\uff08\u4fdd\u5b58\u70b9\uff09","text":"<pre><code>async with async_session.begin() as session:\n    # \u4e3b\u4e8b\u52a1\n    user_data = UserCreate(name=\"\u4e3b\u7528\u6237\", email=\"main@example.com\")\n    user = await user_crud.create_model(session, user_data, flush=True)\n\n    # \u521b\u5efa\u4fdd\u5b58\u70b9\n    savepoint = await session.begin_nested()\n\n    try:\n        # \u5d4c\u5957\u4e8b\u52a1\n        profile_data = ProfileCreate(user_id=user.id, bio=\"\u53ef\u80fd\u5931\u8d25\u7684\u64cd\u4f5c\")\n        profile = await profile_crud.create_model(session, profile_data)\n\n        # \u63d0\u4ea4\u4fdd\u5b58\u70b9\n        await savepoint.commit()\n\n    except Exception as e:\n        # \u56de\u6eda\u5230\u4fdd\u5b58\u70b9\n        await savepoint.rollback()\n        print(f\"\u5d4c\u5957\u4e8b\u52a1\u5931\u8d25\uff0c\u5df2\u56de\u6eda: {e}\")\n\n    # \u4e3b\u4e8b\u52a1\u7ee7\u7eed\n    return user\n</code></pre>"},{"location":"advanced/transaction/#_9","title":"\u6279\u91cf\u64cd\u4f5c\u4e8b\u52a1","text":""},{"location":"advanced/transaction/#_10","title":"\u5206\u6279\u5904\u7406","text":"<pre><code>async def batch_create_users(users_data: list, batch_size: int = 100):\n    \"\"\"\u5206\u6279\u5904\u7406\u5927\u91cf\u6570\u636e\uff0c\u907f\u514d\u957f\u4e8b\u52a1\"\"\"\n\n    for i in range(0, len(users_data), batch_size):\n        batch = users_data[i:i + batch_size]\n\n        async with async_session.begin() as session:\n            # \u5904\u7406\u4e00\u6279\u6570\u636e\n            await user_crud.create_models(session, batch)\n            print(f\"\u5df2\u5904\u7406 {i + len(batch)}/{len(users_data)} \u6761\u8bb0\u5f55\")\n</code></pre>"},{"location":"advanced/transaction/#_11","title":"\u4e8b\u52a1\u5185\u6279\u91cf\u64cd\u4f5c","text":"<pre><code>async with async_session.begin() as session:\n    # \u6279\u91cf\u521b\u5efa\u7528\u6237\n    users_data = [\n        UserCreate(name=f\"\u7528\u6237{i}\", email=f\"user{i}@example.com\")\n        for i in range(100)\n    ]\n    users = await user_crud.create_models(session, users_data)\n\n    # \u6279\u91cf\u66f4\u65b0\n    await user_crud.update_model_by_column(\n        session,\n        obj={\"is_active\": True},\n        created_at__ge=datetime.now() - timedelta(days=1)\n    )\n</code></pre>"},{"location":"advanced/transaction/#_12","title":"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"advanced/transaction/#_13","title":"\u7528\u6237\u6ce8\u518c\u6d41\u7a0b","text":"<pre><code>async def register_user(\n    session: AsyncSession,\n    user_data: UserCreate,\n    profile_data: ProfileCreate = None\n):\n    \"\"\"\u7528\u6237\u6ce8\u518c\uff0c\u5305\u542b\u7528\u6237\u548c\u8d44\u6599\u521b\u5efa\"\"\"\n    async with session.begin():\n        # \u68c0\u67e5\u90ae\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n        existing = await user_crud.exists(session, email=user_data.email)\n        if existing:\n            raise ValueError(\"\u90ae\u7bb1\u5df2\u5b58\u5728\")\n\n        # \u521b\u5efa\u7528\u6237\n        user = await user_crud.create_model(session, user_data, flush=True)\n\n        # \u521b\u5efa\u7528\u6237\u8d44\u6599\uff08\u53ef\u9009\uff09\n        if profile_data:\n            profile_data.user_id = user.id\n            await profile_crud.create_model(session, profile_data)\n\n        return user\n</code></pre>"},{"location":"advanced/transaction/#_14","title":"\u8ba2\u5355\u5904\u7406","text":"<pre><code>async def process_order(\n    session: AsyncSession,\n    order_data: OrderCreate,\n    order_items: list[OrderItemCreate]\n):\n    \"\"\"\u5904\u7406\u8ba2\u5355\u548c\u8ba2\u5355\u9879\"\"\"\n    async with session.begin():\n        # \u521b\u5efa\u8ba2\u5355\n        order = await order_crud.create_model(session, order_data, flush=True)\n\n        # \u521b\u5efa\u8ba2\u5355\u9879\n        for item_data in order_items:\n            item_data.order_id = order.id\n            await order_item_crud.create_model(session, item_data)\n\n        # \u66f4\u65b0\u5e93\u5b58\n        for item_data in order_items:\n            await product_crud.update_model_by_column(\n                session,\n                obj={\"stock\": Product.stock - item_data.quantity},\n                id=item_data.product_id\n            )\n\n        return order\n</code></pre>"},{"location":"advanced/transaction/#_15","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"advanced/transaction/#_16","title":"\u5f02\u5e38\u56de\u6eda","text":"<pre><code>async def safe_user_operation(session: AsyncSession, user_data: dict):\n    \"\"\"\u5b89\u5168\u7684\u7528\u6237\u64cd\u4f5c\uff0c\u5305\u542b\u9519\u8bef\u5904\u7406\"\"\"\n    async with session.begin():\n        try:\n            # \u6267\u884c\u64cd\u4f5c\n            user = await user_crud.create_model(session, user_data)\n\n            # \u53ef\u80fd\u5931\u8d25\u7684\u64cd\u4f5c\n            await send_welcome_email(user.email)\n\n            return user\n\n        except EmailError:\n            # \u7279\u5b9a\u5f02\u5e38\u5904\u7406\n            print(\"\u90ae\u4ef6\u53d1\u9001\u5931\u8d25\uff0c\u4f46\u7528\u6237\u521b\u5efa\u6210\u529f\")\n            return user\n\n        except Exception as e:\n            # \u5176\u4ed6\u5f02\u5e38\u4f1a\u81ea\u52a8\u56de\u6eda\u4e8b\u52a1\n            print(f\"\u64cd\u4f5c\u5931\u8d25: {e}\")\n            raise\n</code></pre>"},{"location":"advanced/transaction/#_17","title":"\u90e8\u5206\u5931\u8d25\u5904\u7406","text":"<pre><code>async def bulk_process_with_savepoints(session: AsyncSession, items: list):\n    \"\"\"\u6279\u91cf\u5904\u7406\uff0c\u90e8\u5206\u5931\u8d25\u4e0d\u5f71\u54cd\u5176\u4ed6\"\"\"\n    results = []\n\n    async with session.begin():\n        for item in items:\n            savepoint = await session.begin_nested()\n\n            try:\n                result = await process_single_item(session, item)\n                await savepoint.commit()\n                results.append(result)\n\n            except Exception as e:\n                await savepoint.rollback()\n                print(f\"\u9879\u76ee {item.id} \u5904\u7406\u5931\u8d25: {e}\")\n                results.append(None)\n\n    return results\n</code></pre>"},{"location":"advanced/transaction/#_18","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u4f18\u5148\u4f7f\u7528\u81ea\u52a8\u4e8b\u52a1\u7ba1\u7406</li> <li>\u4f7f\u7528 <code>async with session.begin()</code> \u6a21\u5f0f</li> <li>\u8ba9\u5f02\u5e38\u81ea\u7136\u4f20\u64ad\u4ee5\u89e6\u53d1\u56de\u6eda</li> <li> <p>\u907f\u514d\u624b\u52a8\u7ba1\u7406\u4e8b\u52a1\u72b6\u6001</p> </li> <li> <p>\u5408\u7406\u4f7f\u7528 flush \u548c commit</p> </li> <li>\u9700\u8981\u4e3b\u952e\u65f6\u4f7f\u7528 <code>flush=True</code></li> <li>\u72ec\u7acb\u64cd\u4f5c\u65f6\u4f7f\u7528 <code>commit=True</code></li> <li> <p>\u907f\u514d\u5728\u4e8b\u52a1\u5757\u4e2d\u4f7f\u7528 <code>commit=True</code></p> </li> <li> <p>\u63a7\u5236\u4e8b\u52a1\u8303\u56f4</p> </li> <li>\u4fdd\u6301\u4e8b\u52a1\u5c3d\u53ef\u80fd\u77ed\u5c0f</li> <li>\u907f\u514d\u5728\u4e8b\u52a1\u4e2d\u6267\u884c\u8017\u65f6\u64cd\u4f5c</li> <li> <p>\u8003\u8651\u4f7f\u7528\u5206\u6279\u5904\u7406</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u5728\u4e8b\u52a1\u5916\u90e8\u5904\u7406\u4e1a\u52a1\u903b\u8f91\u9519\u8bef</li> <li>\u4f7f\u7528\u4fdd\u5b58\u70b9\u5904\u7406\u90e8\u5206\u5931\u8d25\u573a\u666f</li> <li>\u8bb0\u5f55\u4e8b\u52a1\u5931\u8d25\u7684\u8be6\u7ec6\u4fe1\u606f</li> </ol>"},{"location":"advanced/transaction/#_19","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u53c2\u6570\u51b2\u7a81: \u4e0d\u8981\u540c\u65f6\u4f7f\u7528 <code>flush=True</code> \u548c <code>commit=True</code></li> <li>\u4e8b\u52a1\u5d4c\u5957: \u5408\u7406\u4f7f\u7528\u4fdd\u5b58\u70b9\uff0c\u907f\u514d\u8fc7\u6df1\u5d4c\u5957</li> <li>\u957f\u4e8b\u52a1: \u907f\u514d\u957f\u65f6\u95f4\u6301\u6709\u4e8b\u52a1\uff0c\u5f71\u54cd\u6570\u636e\u5e93\u6027\u80fd</li> <li>\u5f02\u5e38\u5904\u7406: \u786e\u4fdd\u5f02\u5e38\u80fd\u591f\u6b63\u786e\u89e6\u53d1\u4e8b\u52a1\u56de\u6eda</li> </ol>"},{"location":"advanced/transaction/#_20","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u5173\u7cfb\u67e5\u8be2 - \u5b66\u4e60\u5173\u7cfb\u67e5\u8be2\u548c JOIN</li> <li>\u8fc7\u6ee4\u6761\u4ef6 - \u9ad8\u7ea7\u8fc7\u6ee4\u6280\u672f  </li> <li>API \u53c2\u8003 - \u5b8c\u6574 API \u6587\u6863</li> </ul>"},{"location":"api/crud-plus/","title":"CRUDPlus API \u53c2\u8003","text":"<p><code>CRUDPlus</code> \u7c7b\u662f\u6267\u884c CRUD \u64cd\u4f5c\u548c\u5173\u7cfb\u67e5\u8be2\u7684\u4e3b\u8981\u63a5\u53e3\u3002</p>"},{"location":"api/crud-plus/#_1","title":"\u7c7b\u5b9a\u4e49","text":""},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus","title":"sqlalchemy_crud_plus.crud.CRUDPlus","text":"<p>               Bases: <code>Generic[Model]</code></p> Source code in <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>class CRUDPlus(Generic[Model]):\n    def __init__(self, model: type[Model]):\n        self.model = model\n        self.model_column_names = [column.key for column in model.__table__.columns]\n        self.primary_key = self._get_primary_key()\n\n    def _get_primary_key(self) -&gt; Column | list[Column]:\n        \"\"\"\n        Dynamically retrieve the primary key column(s) for the model.\n        \"\"\"\n        mapper = inspect(self.model)\n        primary_key = mapper.primary_key\n        if len(primary_key) == 1:\n            return primary_key[0]\n        else:\n            return list(primary_key)\n\n    def _get_pk_filter(self, pk: Any | list[Any]) -&gt; list[ColumnExpressionArgument[bool]]:\n        \"\"\"\n        Get the primary key filter(s).\n\n        :param pk: Single value for simple primary key, or tuple for composite primary key\n        :return:\n        \"\"\"\n        if isinstance(self.primary_key, list):\n            if len(pk) != len(self.primary_key):\n                raise CompositePrimaryKeysError(f'Expected {len(self.primary_key)} values for composite primary key')\n            return [column == value for column, value in zip(self.primary_key, pk)]\n        else:\n            return [self.primary_key == pk]\n\n    async def create_model(\n        self,\n        session: AsyncSession,\n        obj: CreateSchema,\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; Model:\n        \"\"\"\n        Create a new instance of a model.\n\n        :param session: The SQLAlchemy async session\n        :param obj: The Pydantic schema containing data to be saved\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Additional model data not included in the pydantic schema\n        :return:\n        \"\"\"\n        obj_data = obj.model_dump()\n        if kwargs:\n            obj_data.update(kwargs)\n\n        ins = self.model(**obj_data)\n        session.add(ins)\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return ins\n\n    async def create_models(\n        self,\n        session: AsyncSession,\n        objs: list[CreateSchema],\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; list[Model]:\n        \"\"\"\n        Create new instances of a model.\n\n        :param session: The SQLAlchemy async session\n        :param objs: The Pydantic schema list containing data to be saved\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Additional model data not included in the pydantic schema\n        :return:\n        \"\"\"\n        ins_list = []\n        for obj in objs:\n            obj_data = obj.model_dump()\n            if kwargs:\n                obj_data.update(kwargs)\n            ins = self.model(**obj_data)\n            ins_list.append(ins)\n\n        session.add_all(ins_list)\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return ins_list\n\n    async def bulk_create_models(\n        self,\n        session: AsyncSession,\n        objs: list[dict[str, Any]],\n        render_nulls: bool = False,\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; Sequence[Model]:\n        \"\"\"\n        Create new instances of a model.\n\n        :param session: The SQLAlchemy async session\n        :param objs: The dict list containing data to be saved\uff0cThe dict data should be aligned with the model column\n        :param render_nulls: render null values instead of ignoring them\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Additional model data not included in the dict\n        :return:\n        \"\"\"\n        stmt = insert(self.model).values(**kwargs).execution_options(render_nulls=render_nulls).returning(self.model)\n        result = await session.execute(stmt, objs)\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return result.scalars().all()\n\n    async def count(\n        self,\n        session: AsyncSession,\n        *whereclause: ColumnExpressionArgument[bool],\n        join_conditions: JoinConditions | None = None,\n        **kwargs,\n    ) -&gt; int:\n        \"\"\"\n        Count records that match specified filters.\n\n        :param session: SQLAlchemy async session\n        :param whereclause: Additional WHERE clauses\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        filters = list(whereclause)\n\n        if kwargs:\n            filters.extend(parse_filters(self.model, **kwargs))\n\n        if isinstance(self.primary_key, list):\n            stmt = select(func.count()).select_from(self.model)\n        else:\n            stmt = select(func.count(self.primary_key)).select_from(self.model)\n\n        if filters:\n            stmt = stmt.where(*filters)\n\n        if join_conditions:\n            stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n        query = await session.execute(stmt)\n        total_count = query.scalar()\n        return total_count if total_count is not None else 0\n\n    async def exists(\n        self,\n        session: AsyncSession,\n        *whereclause: ColumnExpressionArgument[bool],\n        join_conditions: JoinConditions | None = None,\n        **kwargs,\n    ) -&gt; bool:\n        \"\"\"\n        Check whether records that match the specified filters exist.\n\n        :param session: SQLAlchemy async session\n        :param whereclause: Additional WHERE clauses\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        filters = list(whereclause)\n\n        if kwargs:\n            filters.extend(parse_filters(self.model, **kwargs))\n\n        stmt = select(self.model).where(*filters).limit(1)\n\n        if join_conditions:\n            stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n        query = await session.execute(stmt)\n        return query.scalars().first() is not None\n\n    async def select_model(\n        self,\n        session: AsyncSession,\n        pk: Any | Sequence[Any],\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        **kwargs: Any,\n    ) -&gt; Model | None:\n        \"\"\"\n        Query by primary key(s) with optional relationship loading and joins.\n\n        :param session: SQLAlchemy async session\n        :param pk: Primary key value(s) - single value or tuple for composite keys\n        :param whereclause: Additional WHERE clauses\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        filters = list(whereclause)\n        filters.extend(self._get_pk_filter(pk))\n\n        if kwargs:\n            filters.extend(parse_filters(self.model, **kwargs))\n\n        stmt = select(self.model).where(*filters)\n\n        if load_options:\n            stmt = stmt.options(*load_options)\n\n        if join_conditions:\n            stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n        if load_strategies:\n            rel_options = build_load_strategies(self.model, load_strategies)\n            if rel_options:\n                stmt = stmt.options(*rel_options)\n\n        query = await session.execute(stmt)\n\n        if join_conditions:\n            if has_join_fill_result(join_conditions):\n                result = query.first()\n                return result[0] if result else None\n\n        return query.scalars().first()\n\n    async def select_model_by_column(\n        self,\n        session: AsyncSession,\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        **kwargs: Any,\n    ) -&gt; Model | None:\n        \"\"\"\n        Query by column with optional relationship loading and joins.\n\n        :param session: SQLAlchemy async session\n        :param whereclause: Additional WHERE clauses\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        stmt = await self.select(\n            *whereclause,\n            load_options=load_options,\n            load_strategies=load_strategies,\n            join_conditions=join_conditions,\n            **kwargs,\n        )\n\n        query = await session.execute(stmt)\n\n        if join_conditions:\n            if has_join_fill_result(join_conditions):\n                result = query.first()\n                return result[0] if result else None\n\n        return query.scalars().first()\n\n    async def select(\n        self,\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        **kwargs,\n    ) -&gt; Select:\n        \"\"\"\n        Construct the SQLAlchemy selection.\n\n        :param whereclause: WHERE clauses to apply to the query\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Query expressions\n        :return:\n        \"\"\"\n        filters = list(whereclause)\n        filters.extend(parse_filters(self.model, **kwargs))\n        stmt = select(self.model).where(*filters)\n\n        if join_conditions:\n            stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n        if load_options:\n            stmt = stmt.options(*load_options)\n\n        if load_strategies:\n            rel_options = build_load_strategies(self.model, load_strategies)\n            if rel_options:\n                stmt = stmt.options(*rel_options)\n\n        return stmt\n\n    async def select_order(\n        self,\n        sort_columns: SortColumns,\n        sort_orders: SortOrders = None,\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        **kwargs: Any,\n    ) -&gt; Select:\n        \"\"\"\n        Construct SQLAlchemy selection with sorting.\n\n        :param sort_columns: Column names to sort by\n        :param sort_orders: Sort orders ('asc' or 'desc')\n        :param whereclause: WHERE clauses to apply to the query\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param kwargs: Query expressions\n        :return:\n        \"\"\"\n        stmt = await self.select(\n            *whereclause,\n            load_options=load_options,\n            load_strategies=load_strategies,\n            join_conditions=join_conditions,\n            **kwargs,\n        )\n        sorted_stmt = apply_sorting(self.model, stmt, sort_columns, sort_orders)\n        return sorted_stmt\n\n    async def select_models(\n        self,\n        session: AsyncSession,\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        limit: int | None = None,\n        offset: int | None = None,\n        **kwargs: Any,\n    ) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]:\n        \"\"\"\n        Query all rows that match the specified filters with optional relationship loading and joins.\n\n        :param session: SQLAlchemy async session\n        :param whereclause: Additional WHERE clauses\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param limit: Maximum number of results to return\n        :param offset: Number of results to skip\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        stmt = await self.select(\n            *whereclause,\n            load_options=load_options,\n            load_strategies=load_strategies,\n            join_conditions=join_conditions,\n            **kwargs,\n        )\n\n        if limit is not None:\n            stmt = stmt.limit(limit)\n        if offset is not None:\n            stmt = stmt.offset(offset)\n\n        query = await session.execute(stmt)\n\n        if join_conditions:\n            if has_join_fill_result(join_conditions):\n                return query.all()\n\n        return query.scalars().all()\n\n    async def select_models_order(\n        self,\n        session: AsyncSession,\n        sort_columns: SortColumns,\n        sort_orders: SortOrders = None,\n        *whereclause: ColumnExpressionArgument[bool],\n        load_options: LoadOptions | None = None,\n        load_strategies: LoadStrategies | None = None,\n        join_conditions: JoinConditions | None = None,\n        limit: int | None = None,\n        offset: int | None = None,\n        **kwargs: Any,\n    ) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]:\n        \"\"\"\n        Query all rows that match the specified filters and sort by columns\n        with optional relationship loading and joins.\n\n        :param session: SQLAlchemy async session\n        :param sort_columns: Column names to sort by\n        :param sort_orders: Sort orders ('asc' or 'desc')\n        :param whereclause: Additional WHERE clauses\n        :param load_options: SQLAlchemy loading options\n        :param load_strategies: Relationship loading strategies\n        :param join_conditions: JOIN conditions for relationships\n        :param limit: Maximum number of results to return\n        :param offset: Number of results to skip\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        stmt = await self.select_order(\n            sort_columns,\n            sort_orders,\n            *whereclause,\n            load_options=load_options,\n            load_strategies=load_strategies,\n            join_conditions=join_conditions,\n            **kwargs,\n        )\n\n        if limit is not None:\n            stmt = stmt.limit(limit)\n        if offset is not None:\n            stmt = stmt.offset(offset)\n\n        query = await session.execute(stmt)\n\n        if join_conditions:\n            if has_join_fill_result(join_conditions):\n                return query.all()\n\n        return query.scalars().all()\n\n    async def update_model(\n        self,\n        session: AsyncSession,\n        pk: Any | Sequence[Any],\n        obj: UpdateSchema | dict[str, Any],\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; int:\n        \"\"\"\n        Update an instance by model's primary key\n\n        :param session: The SQLAlchemy async session.\n        :param pk: Single value for simple primary key, or tuple for composite primary key.\n        :param obj: A pydantic schema or dictionary containing the update data\n        :param flush: If `True`, flush all object changes to the database. Default is `False`.\n        :param commit: If `True`, commits the transaction immediately. Default is `False`.\n        :param kwargs: Additional model data not included in the pydantic schema.\n        :return:\n        \"\"\"\n        filters = self._get_pk_filter(pk)\n        data = obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True)\n        data.update(kwargs)\n        stmt = update(self.model).where(*filters).values(**data)\n        result = cast(CursorResult[Any], await session.execute(stmt))\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return result.rowcount\n\n    async def update_model_by_column(\n        self,\n        session: AsyncSession,\n        obj: UpdateSchema | dict[str, Any],\n        allow_multiple: bool = False,\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; int:\n        \"\"\"\n        Update records by model column filters.\n\n        :param session: The SQLAlchemy async session\n        :param obj: A Pydantic schema or dictionary containing the update data\n        :param allow_multiple: If `True`, allows updating multiple records that match the filters\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        filters = parse_filters(self.model, **kwargs)\n\n        if not filters:\n            raise ValueError('At least one filter condition must be provided for update operation')\n\n        if not allow_multiple:\n            total_count = await self.count(session, *filters)\n            if total_count &gt; 1:\n                raise MultipleResultsError(f'Only one record is expected to be updated, found {total_count} records.')\n\n        data = obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True)\n        stmt = update(self.model).where(*filters).values(**data)\n        result = cast(CursorResult[Any], await session.execute(stmt))\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return result.rowcount\n\n    async def bulk_update_models(\n        self,\n        session: AsyncSession,\n        objs: list[UpdateSchema | dict[str, Any]],\n        pk_mode: bool = True,\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; int:\n        \"\"\"\n        Bulk update multiple instances with different data for each record.\n\n        :param session: The SQLAlchemy async session\n        :param objs: To save a list of Pydantic schemas or dict for data\n        :param pk_mode: Primary key mode, when enabled, the data must contain the primary key data\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        if not pk_mode:\n            filters = parse_filters(self.model, **kwargs)\n\n            if not filters:\n                raise ValueError('At least one filter condition must be provided for update operation')\n\n            datas = [obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True) for obj in objs]\n            stmt = update(self.model).where(*filters)\n            conn = await session.connection()\n            await conn.execute(stmt, datas)\n        else:\n            datas = [obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True) for obj in objs]\n            await session.execute(update(self.model), datas)\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return len(datas)\n\n    async def delete_model(\n        self,\n        session: AsyncSession,\n        pk: Any | Sequence[Any],\n        flush: bool = False,\n        commit: bool = False,\n    ) -&gt; int:\n        \"\"\"\n        Delete an instance by model's primary key\n\n        :param session: The SQLAlchemy async session.\n        :param pk: Single value for simple primary key, or tuple for composite primary key.\n        :param flush: If `True`, flush all object changes to the database. Default is `False`.\n        :param commit: If `True`, commits the transaction immediately. Default is `False`.\n        :return:\n        \"\"\"\n        filters = self._get_pk_filter(pk)\n\n        stmt = delete(self.model).where(*filters)\n        result = cast(CursorResult[Any], await session.execute(stmt))\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return result.rowcount\n\n    async def delete_model_by_column(\n        self,\n        session: AsyncSession,\n        allow_multiple: bool = False,\n        logical_deletion: bool = False,\n        deleted_flag_column: str = 'is_deleted',\n        deleted_at_column: str = 'deleted_at',\n        deleted_at_factory: datetime = datetime.now(timezone.utc),\n        flush: bool = False,\n        commit: bool = False,\n        **kwargs,\n    ) -&gt; int:\n        \"\"\"\n        Delete records by model column filters.\n\n        :param session: The SQLAlchemy async session\n        :param allow_multiple: If `True`, allows deleting multiple records that match the filters\n        :param logical_deletion: If `True`, enable logical deletion instead of physical deletion\n        :param deleted_flag_column: Column name for logical deletion flag\n        :param deleted_at_column: Column name for delete time\uff0cautomatic judgment\n        :param deleted_at_factory: The delete time column datetime factory function\n        :param flush: If `True`, flush all object changes to the database\n        :param commit: If `True`, commits the transaction immediately\n        :param kwargs: Filter expressions using field__operator=value syntax\n        :return:\n        \"\"\"\n        if logical_deletion:\n            if deleted_flag_column not in self.model_column_names:\n                raise ModelColumnError(f'Column {deleted_flag_column} is not found in {self.model}')\n\n        filters = parse_filters(self.model, **kwargs)\n\n        if not filters:\n            raise ValueError('At least one filter condition must be provided for delete operation')\n\n        if not allow_multiple:\n            total_count = await self.count(session, *filters)\n            if total_count &gt; 1:\n                raise MultipleResultsError(f'Only one record is expected to be deleted, found {total_count} records.')\n\n        data = {deleted_flag_column: True}\n\n        if deleted_at_column in self.model_column_names:\n            data[deleted_at_column] = deleted_at_factory\n\n        stmt = (\n            update(self.model).where(*filters).values(**data)\n            if logical_deletion\n            else delete(self.model).where(*filters)\n        )\n\n        result = cast(CursorResult[Any], await session.execute(stmt))\n\n        if flush:\n            await session.flush()\n        if commit:\n            await session.commit()\n\n        return result.rowcount\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    session: AsyncSession,\n    obj: CreateSchema,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; Model\n</code></pre> <p>Create a new instance of a model.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>obj</code> <code>CreateSchema</code> <p>The Pydantic schema containing data to be saved</p> \u5fc5\u9700 <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Additional model data not included in the pydantic schema</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Model</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def create_model(\n    self,\n    session: AsyncSession,\n    obj: CreateSchema,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; Model:\n    \"\"\"\n    Create a new instance of a model.\n\n    :param session: The SQLAlchemy async session\n    :param obj: The Pydantic schema containing data to be saved\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Additional model data not included in the pydantic schema\n    :return:\n    \"\"\"\n    obj_data = obj.model_dump()\n    if kwargs:\n        obj_data.update(kwargs)\n\n    ins = self.model(**obj_data)\n    session.add(ins)\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return ins\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.create_models","title":"create_models  <code>async</code>","text":"<pre><code>create_models(\n    session: AsyncSession,\n    objs: list[CreateSchema],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; list[Model]\n</code></pre> <p>Create new instances of a model.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>objs</code> <code>list[CreateSchema]</code> <p>The Pydantic schema list containing data to be saved</p> \u5fc5\u9700 <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Additional model data not included in the pydantic schema</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[Model]</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def create_models(\n    self,\n    session: AsyncSession,\n    objs: list[CreateSchema],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; list[Model]:\n    \"\"\"\n    Create new instances of a model.\n\n    :param session: The SQLAlchemy async session\n    :param objs: The Pydantic schema list containing data to be saved\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Additional model data not included in the pydantic schema\n    :return:\n    \"\"\"\n    ins_list = []\n    for obj in objs:\n        obj_data = obj.model_dump()\n        if kwargs:\n            obj_data.update(kwargs)\n        ins = self.model(**obj_data)\n        ins_list.append(ins)\n\n    session.add_all(ins_list)\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return ins_list\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.bulk_create_models","title":"bulk_create_models  <code>async</code>","text":"<pre><code>bulk_create_models(\n    session: AsyncSession,\n    objs: list[dict[str, Any]],\n    render_nulls: bool = False,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; Sequence[Model]\n</code></pre> <p>Create new instances of a model.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>objs</code> <code>list[dict[str, Any]]</code> <p>The dict list containing data to be saved\uff0cThe dict data should be aligned with the model column</p> \u5fc5\u9700 <code>render_nulls</code> <code>bool</code> <p>render null values instead of ignoring them</p> <code>False</code> <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Additional model data not included in the dict</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Sequence[Model]</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def bulk_create_models(\n    self,\n    session: AsyncSession,\n    objs: list[dict[str, Any]],\n    render_nulls: bool = False,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; Sequence[Model]:\n    \"\"\"\n    Create new instances of a model.\n\n    :param session: The SQLAlchemy async session\n    :param objs: The dict list containing data to be saved\uff0cThe dict data should be aligned with the model column\n    :param render_nulls: render null values instead of ignoring them\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Additional model data not included in the dict\n    :return:\n    \"\"\"\n    stmt = insert(self.model).values(**kwargs).execution_options(render_nulls=render_nulls).returning(self.model)\n    result = await session.execute(stmt, objs)\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return result.scalars().all()\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.count","title":"count  <code>async</code>","text":"<pre><code>count(\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; int\n</code></pre> <p>Count records that match specified filters.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def count(\n    self,\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\n    Count records that match specified filters.\n\n    :param session: SQLAlchemy async session\n    :param whereclause: Additional WHERE clauses\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    filters = list(whereclause)\n\n    if kwargs:\n        filters.extend(parse_filters(self.model, **kwargs))\n\n    if isinstance(self.primary_key, list):\n        stmt = select(func.count()).select_from(self.model)\n    else:\n        stmt = select(func.count(self.primary_key)).select_from(self.model)\n\n    if filters:\n        stmt = stmt.where(*filters)\n\n    if join_conditions:\n        stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n    query = await session.execute(stmt)\n    total_count = query.scalar()\n    return total_count if total_count is not None else 0\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.exists","title":"exists  <code>async</code>","text":"<pre><code>exists(\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Check whether records that match the specified filters exist.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def exists(\n    self,\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; bool:\n    \"\"\"\n    Check whether records that match the specified filters exist.\n\n    :param session: SQLAlchemy async session\n    :param whereclause: Additional WHERE clauses\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    filters = list(whereclause)\n\n    if kwargs:\n        filters.extend(parse_filters(self.model, **kwargs))\n\n    stmt = select(self.model).where(*filters).limit(1)\n\n    if join_conditions:\n        stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n    query = await session.execute(stmt)\n    return query.scalars().first() is not None\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select_model","title":"select_model  <code>async</code>","text":"<pre><code>select_model(\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Model | None\n</code></pre> <p>Query by primary key(s) with optional relationship loading and joins.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>pk</code> <code>Any | Sequence[Any]</code> <p>Primary key value(s) - single value or tuple for composite keys</p> \u5fc5\u9700 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Model | None</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select_model(\n    self,\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Model | None:\n    \"\"\"\n    Query by primary key(s) with optional relationship loading and joins.\n\n    :param session: SQLAlchemy async session\n    :param pk: Primary key value(s) - single value or tuple for composite keys\n    :param whereclause: Additional WHERE clauses\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    filters = list(whereclause)\n    filters.extend(self._get_pk_filter(pk))\n\n    if kwargs:\n        filters.extend(parse_filters(self.model, **kwargs))\n\n    stmt = select(self.model).where(*filters)\n\n    if load_options:\n        stmt = stmt.options(*load_options)\n\n    if join_conditions:\n        stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n    if load_strategies:\n        rel_options = build_load_strategies(self.model, load_strategies)\n        if rel_options:\n            stmt = stmt.options(*rel_options)\n\n    query = await session.execute(stmt)\n\n    if join_conditions:\n        if has_join_fill_result(join_conditions):\n            result = query.first()\n            return result[0] if result else None\n\n    return query.scalars().first()\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select_model_by_column","title":"select_model_by_column  <code>async</code>","text":"<pre><code>select_model_by_column(\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Model | None\n</code></pre> <p>Query by column with optional relationship loading and joins.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Model | None</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select_model_by_column(\n    self,\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Model | None:\n    \"\"\"\n    Query by column with optional relationship loading and joins.\n\n    :param session: SQLAlchemy async session\n    :param whereclause: Additional WHERE clauses\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    stmt = await self.select(\n        *whereclause,\n        load_options=load_options,\n        load_strategies=load_strategies,\n        join_conditions=join_conditions,\n        **kwargs,\n    )\n\n    query = await session.execute(stmt)\n\n    if join_conditions:\n        if has_join_fill_result(join_conditions):\n            result = query.first()\n            return result[0] if result else None\n\n    return query.scalars().first()\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select","title":"select  <code>async</code>","text":"<pre><code>select(\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; Select\n</code></pre> <p>Construct the SQLAlchemy selection.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>WHERE clauses to apply to the query</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <p>Query expressions</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Select</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select(\n    self,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs,\n) -&gt; Select:\n    \"\"\"\n    Construct the SQLAlchemy selection.\n\n    :param whereclause: WHERE clauses to apply to the query\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Query expressions\n    :return:\n    \"\"\"\n    filters = list(whereclause)\n    filters.extend(parse_filters(self.model, **kwargs))\n    stmt = select(self.model).where(*filters)\n\n    if join_conditions:\n        stmt = apply_join_conditions(self.model, stmt, join_conditions)\n\n    if load_options:\n        stmt = stmt.options(*load_options)\n\n    if load_strategies:\n        rel_options = build_load_strategies(self.model, load_strategies)\n        if rel_options:\n            stmt = stmt.options(*rel_options)\n\n    return stmt\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select_order","title":"select_order  <code>async</code>","text":"<pre><code>select_order(\n    sort_columns: SortColumns,\n    sort_orders: SortOrders = None,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Select\n</code></pre> <p>Construct SQLAlchemy selection with sorting.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>sort_columns</code> <code>SortColumns</code> <p>Column names to sort by</p> \u5fc5\u9700 <code>sort_orders</code> <code>SortOrders</code> <p>Sort orders ('asc' or 'desc')</p> <code>None</code> <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>WHERE clauses to apply to the query</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Query expressions</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Select</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select_order(\n    self,\n    sort_columns: SortColumns,\n    sort_orders: SortOrders = None,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    **kwargs: Any,\n) -&gt; Select:\n    \"\"\"\n    Construct SQLAlchemy selection with sorting.\n\n    :param sort_columns: Column names to sort by\n    :param sort_orders: Sort orders ('asc' or 'desc')\n    :param whereclause: WHERE clauses to apply to the query\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param kwargs: Query expressions\n    :return:\n    \"\"\"\n    stmt = await self.select(\n        *whereclause,\n        load_options=load_options,\n        load_strategies=load_strategies,\n        join_conditions=join_conditions,\n        **kwargs,\n    )\n    sorted_stmt = apply_sorting(self.model, stmt, sort_columns, sort_orders)\n    return sorted_stmt\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select_models","title":"select_models  <code>async</code>","text":"<pre><code>select_models(\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    **kwargs: Any,\n) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]\n</code></pre> <p>Query all rows that match the specified filters with optional relationship loading and joins.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>limit</code> <code>int | None</code> <p>Maximum number of results to return</p> <code>None</code> <code>offset</code> <code>int | None</code> <p>Number of results to skip</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Sequence[Row[tuple[Model, ...] | Any] | Model]</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select_models(\n    self,\n    session: AsyncSession,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    **kwargs: Any,\n) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]:\n    \"\"\"\n    Query all rows that match the specified filters with optional relationship loading and joins.\n\n    :param session: SQLAlchemy async session\n    :param whereclause: Additional WHERE clauses\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param limit: Maximum number of results to return\n    :param offset: Number of results to skip\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    stmt = await self.select(\n        *whereclause,\n        load_options=load_options,\n        load_strategies=load_strategies,\n        join_conditions=join_conditions,\n        **kwargs,\n    )\n\n    if limit is not None:\n        stmt = stmt.limit(limit)\n    if offset is not None:\n        stmt = stmt.offset(offset)\n\n    query = await session.execute(stmt)\n\n    if join_conditions:\n        if has_join_fill_result(join_conditions):\n            return query.all()\n\n    return query.scalars().all()\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.select_models_order","title":"select_models_order  <code>async</code>","text":"<pre><code>select_models_order(\n    session: AsyncSession,\n    sort_columns: SortColumns,\n    sort_orders: SortOrders = None,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    **kwargs: Any,\n) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]\n</code></pre> <p>Query all rows that match the specified filters and sort by columns with optional relationship loading and joins.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>SQLAlchemy async session</p> \u5fc5\u9700 <code>sort_columns</code> <code>SortColumns</code> <p>Column names to sort by</p> \u5fc5\u9700 <code>sort_orders</code> <code>SortOrders</code> <p>Sort orders ('asc' or 'desc')</p> <code>None</code> <code>whereclause</code> <code>ColumnExpressionArgument[bool]</code> <p>Additional WHERE clauses</p> <code>()</code> <code>load_options</code> <code>LoadOptions | None</code> <p>SQLAlchemy loading options</p> <code>None</code> <code>load_strategies</code> <code>LoadStrategies | None</code> <p>Relationship loading strategies</p> <code>None</code> <code>join_conditions</code> <code>JoinConditions | None</code> <p>JOIN conditions for relationships</p> <code>None</code> <code>limit</code> <code>int | None</code> <p>Maximum number of results to return</p> <code>None</code> <code>offset</code> <code>int | None</code> <p>Number of results to skip</p> <code>None</code> <code>kwargs</code> <code>Any</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Sequence[Row[tuple[Model, ...] | Any] | Model]</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def select_models_order(\n    self,\n    session: AsyncSession,\n    sort_columns: SortColumns,\n    sort_orders: SortOrders = None,\n    *whereclause: ColumnExpressionArgument[bool],\n    load_options: LoadOptions | None = None,\n    load_strategies: LoadStrategies | None = None,\n    join_conditions: JoinConditions | None = None,\n    limit: int | None = None,\n    offset: int | None = None,\n    **kwargs: Any,\n) -&gt; Sequence[Row[tuple[Model, ...] | Any] | Model]:\n    \"\"\"\n    Query all rows that match the specified filters and sort by columns\n    with optional relationship loading and joins.\n\n    :param session: SQLAlchemy async session\n    :param sort_columns: Column names to sort by\n    :param sort_orders: Sort orders ('asc' or 'desc')\n    :param whereclause: Additional WHERE clauses\n    :param load_options: SQLAlchemy loading options\n    :param load_strategies: Relationship loading strategies\n    :param join_conditions: JOIN conditions for relationships\n    :param limit: Maximum number of results to return\n    :param offset: Number of results to skip\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    stmt = await self.select_order(\n        sort_columns,\n        sort_orders,\n        *whereclause,\n        load_options=load_options,\n        load_strategies=load_strategies,\n        join_conditions=join_conditions,\n        **kwargs,\n    )\n\n    if limit is not None:\n        stmt = stmt.limit(limit)\n    if offset is not None:\n        stmt = stmt.offset(offset)\n\n    query = await session.execute(stmt)\n\n    if join_conditions:\n        if has_join_fill_result(join_conditions):\n            return query.all()\n\n    return query.scalars().all()\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    obj: UpdateSchema | dict[str, Any],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int\n</code></pre> <p>Update an instance by model's primary key</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session.</p> \u5fc5\u9700 <code>pk</code> <code>Any | Sequence[Any]</code> <p>Single value for simple primary key, or tuple for composite primary key.</p> \u5fc5\u9700 <code>obj</code> <code>UpdateSchema | dict[str, Any]</code> <p>A pydantic schema or dictionary containing the update data</p> \u5fc5\u9700 <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database. Default is <code>False</code>.</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately. Default is <code>False</code>.</p> <code>False</code> <code>kwargs</code> <p>Additional model data not included in the pydantic schema.</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def update_model(\n    self,\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    obj: UpdateSchema | dict[str, Any],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\n    Update an instance by model's primary key\n\n    :param session: The SQLAlchemy async session.\n    :param pk: Single value for simple primary key, or tuple for composite primary key.\n    :param obj: A pydantic schema or dictionary containing the update data\n    :param flush: If `True`, flush all object changes to the database. Default is `False`.\n    :param commit: If `True`, commits the transaction immediately. Default is `False`.\n    :param kwargs: Additional model data not included in the pydantic schema.\n    :return:\n    \"\"\"\n    filters = self._get_pk_filter(pk)\n    data = obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True)\n    data.update(kwargs)\n    stmt = update(self.model).where(*filters).values(**data)\n    result = cast(CursorResult[Any], await session.execute(stmt))\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return result.rowcount\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.update_model_by_column","title":"update_model_by_column  <code>async</code>","text":"<pre><code>update_model_by_column(\n    session: AsyncSession,\n    obj: UpdateSchema | dict[str, Any],\n    allow_multiple: bool = False,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int\n</code></pre> <p>Update records by model column filters.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>obj</code> <code>UpdateSchema | dict[str, Any]</code> <p>A Pydantic schema or dictionary containing the update data</p> \u5fc5\u9700 <code>allow_multiple</code> <code>bool</code> <p>If <code>True</code>, allows updating multiple records that match the filters</p> <code>False</code> <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def update_model_by_column(\n    self,\n    session: AsyncSession,\n    obj: UpdateSchema | dict[str, Any],\n    allow_multiple: bool = False,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\n    Update records by model column filters.\n\n    :param session: The SQLAlchemy async session\n    :param obj: A Pydantic schema or dictionary containing the update data\n    :param allow_multiple: If `True`, allows updating multiple records that match the filters\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    filters = parse_filters(self.model, **kwargs)\n\n    if not filters:\n        raise ValueError('At least one filter condition must be provided for update operation')\n\n    if not allow_multiple:\n        total_count = await self.count(session, *filters)\n        if total_count &gt; 1:\n            raise MultipleResultsError(f'Only one record is expected to be updated, found {total_count} records.')\n\n    data = obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True)\n    stmt = update(self.model).where(*filters).values(**data)\n    result = cast(CursorResult[Any], await session.execute(stmt))\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return result.rowcount\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.bulk_update_models","title":"bulk_update_models  <code>async</code>","text":"<pre><code>bulk_update_models(\n    session: AsyncSession,\n    objs: list[UpdateSchema | dict[str, Any]],\n    pk_mode: bool = True,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int\n</code></pre> <p>Bulk update multiple instances with different data for each record.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>objs</code> <code>list[UpdateSchema | dict[str, Any]]</code> <p>To save a list of Pydantic schemas or dict for data</p> \u5fc5\u9700 <code>pk_mode</code> <code>bool</code> <p>Primary key mode, when enabled, the data must contain the primary key data</p> <code>True</code> <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def bulk_update_models(\n    self,\n    session: AsyncSession,\n    objs: list[UpdateSchema | dict[str, Any]],\n    pk_mode: bool = True,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\n    Bulk update multiple instances with different data for each record.\n\n    :param session: The SQLAlchemy async session\n    :param objs: To save a list of Pydantic schemas or dict for data\n    :param pk_mode: Primary key mode, when enabled, the data must contain the primary key data\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    if not pk_mode:\n        filters = parse_filters(self.model, **kwargs)\n\n        if not filters:\n            raise ValueError('At least one filter condition must be provided for update operation')\n\n        datas = [obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True) for obj in objs]\n        stmt = update(self.model).where(*filters)\n        conn = await session.connection()\n        await conn.execute(stmt, datas)\n    else:\n        datas = [obj if isinstance(obj, dict) else obj.model_dump(exclude_unset=True) for obj in objs]\n        await session.execute(update(self.model), datas)\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return len(datas)\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    flush: bool = False,\n    commit: bool = False,\n) -&gt; int\n</code></pre> <p>Delete an instance by model's primary key</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session.</p> \u5fc5\u9700 <code>pk</code> <code>Any | Sequence[Any]</code> <p>Single value for simple primary key, or tuple for composite primary key.</p> \u5fc5\u9700 <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database. Default is <code>False</code>.</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately. Default is <code>False</code>.</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def delete_model(\n    self,\n    session: AsyncSession,\n    pk: Any | Sequence[Any],\n    flush: bool = False,\n    commit: bool = False,\n) -&gt; int:\n    \"\"\"\n    Delete an instance by model's primary key\n\n    :param session: The SQLAlchemy async session.\n    :param pk: Single value for simple primary key, or tuple for composite primary key.\n    :param flush: If `True`, flush all object changes to the database. Default is `False`.\n    :param commit: If `True`, commits the transaction immediately. Default is `False`.\n    :return:\n    \"\"\"\n    filters = self._get_pk_filter(pk)\n\n    stmt = delete(self.model).where(*filters)\n    result = cast(CursorResult[Any], await session.execute(stmt))\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return result.rowcount\n</code></pre>"},{"location":"api/crud-plus/#sqlalchemy_crud_plus.crud.CRUDPlus.delete_model_by_column","title":"delete_model_by_column  <code>async</code>","text":"<pre><code>delete_model_by_column(\n    session: AsyncSession,\n    allow_multiple: bool = False,\n    logical_deletion: bool = False,\n    deleted_flag_column: str = 'is_deleted',\n    deleted_at_column: str = 'deleted_at',\n    deleted_at_factory: datetime = datetime.now(\n        timezone.utc\n    ),\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int\n</code></pre> <p>Delete records by model column filters.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>session</code> <code>AsyncSession</code> <p>The SQLAlchemy async session</p> \u5fc5\u9700 <code>allow_multiple</code> <code>bool</code> <p>If <code>True</code>, allows deleting multiple records that match the filters</p> <code>False</code> <code>logical_deletion</code> <code>bool</code> <p>If <code>True</code>, enable logical deletion instead of physical deletion</p> <code>False</code> <code>deleted_flag_column</code> <code>str</code> <p>Column name for logical deletion flag</p> <code>'is_deleted'</code> <code>deleted_at_column</code> <code>str</code> <p>Column name for delete time\uff0cautomatic judgment</p> <code>'deleted_at'</code> <code>deleted_at_factory</code> <code>datetime</code> <p>The delete time column datetime factory function</p> <code>now(utc)</code> <code>flush</code> <code>bool</code> <p>If <code>True</code>, flush all object changes to the database</p> <code>False</code> <code>commit</code> <code>bool</code> <p>If <code>True</code>, commits the transaction immediately</p> <code>False</code> <code>kwargs</code> <p>Filter expressions using field__operator=value syntax</p> <code>{}</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>sqlalchemy_crud_plus/crud.py</code> <pre><code>async def delete_model_by_column(\n    self,\n    session: AsyncSession,\n    allow_multiple: bool = False,\n    logical_deletion: bool = False,\n    deleted_flag_column: str = 'is_deleted',\n    deleted_at_column: str = 'deleted_at',\n    deleted_at_factory: datetime = datetime.now(timezone.utc),\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\n    Delete records by model column filters.\n\n    :param session: The SQLAlchemy async session\n    :param allow_multiple: If `True`, allows deleting multiple records that match the filters\n    :param logical_deletion: If `True`, enable logical deletion instead of physical deletion\n    :param deleted_flag_column: Column name for logical deletion flag\n    :param deleted_at_column: Column name for delete time\uff0cautomatic judgment\n    :param deleted_at_factory: The delete time column datetime factory function\n    :param flush: If `True`, flush all object changes to the database\n    :param commit: If `True`, commits the transaction immediately\n    :param kwargs: Filter expressions using field__operator=value syntax\n    :return:\n    \"\"\"\n    if logical_deletion:\n        if deleted_flag_column not in self.model_column_names:\n            raise ModelColumnError(f'Column {deleted_flag_column} is not found in {self.model}')\n\n    filters = parse_filters(self.model, **kwargs)\n\n    if not filters:\n        raise ValueError('At least one filter condition must be provided for delete operation')\n\n    if not allow_multiple:\n        total_count = await self.count(session, *filters)\n        if total_count &gt; 1:\n            raise MultipleResultsError(f'Only one record is expected to be deleted, found {total_count} records.')\n\n    data = {deleted_flag_column: True}\n\n    if deleted_at_column in self.model_column_names:\n        data[deleted_at_column] = deleted_at_factory\n\n    stmt = (\n        update(self.model).where(*filters).values(**data)\n        if logical_deletion\n        else delete(self.model).where(*filters)\n    )\n\n    result = cast(CursorResult[Any], await session.execute(stmt))\n\n    if flush:\n        await session.flush()\n    if commit:\n        await session.commit()\n\n    return result.rowcount\n</code></pre>"},{"location":"getting-started/quick-start/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6307\u5357\u5e2e\u52a9\u60a8\u5728 5 \u5206\u949f\u5185\u5feb\u901f\u4e0a\u624b SQLAlchemy CRUD Plus\u3002</p>"},{"location":"getting-started/quick-start/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install sqlalchemy-crud-plus\n</code></pre>"},{"location":"getting-started/quick-start/#_3","title":"\u57fa\u7840\u914d\u7f6e","text":""},{"location":"getting-started/quick-start/#_4","title":"\u6570\u636e\u5e93\u914d\u7f6e","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker\nfrom sqlalchemy.orm import DeclarativeBase\n\n# \u6570\u636e\u5e93\u8fde\u63a5\nDATABASE_URL = \"sqlite+aiosqlite:///./app.db\"\n\nengine = create_async_engine(DATABASE_URL)\nasync_session = async_sessionmaker(bind=engine, class_=AsyncSession)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nasync def get_session():\n    async with async_session() as session:\n        yield session\n</code></pre>"},{"location":"getting-started/quick-start/#_5","title":"\u6a21\u578b\u5b9a\u4e49","text":"<pre><code>from datetime import datetime\nfrom sqlalchemy import String, DateTime, Boolean, ForeignKey, func\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    email: Mapped[str] = mapped_column(String(100), unique=True)\n    is_active: Mapped[bool] = mapped_column(default=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now())\n\n    posts: Mapped[list[\"Post\"]] = relationship(back_populates=\"author\")\n\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(String(1000))\n    author_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n    created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now())\n\n    author: Mapped[User] = relationship(back_populates=\"posts\")\n</code></pre>"},{"location":"getting-started/quick-start/#pydantic","title":"Pydantic \u6a21\u5f0f","text":"<pre><code>from pydantic import BaseModel\n\n\nclass UserCreate(BaseModel):\n    name: str\n    email: str\n    is_active: bool = True\n\n\nclass UserUpdate(BaseModel):\n    name: str | None = None\n    email: str | None = None\n    is_active: bool | None = None\n\n\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n    author_id: int\n</code></pre>"},{"location":"getting-started/quick-start/#_6","title":"\u57fa\u672c\u4f7f\u7528","text":""},{"location":"getting-started/quick-start/#crud","title":"\u521b\u5efa CRUD \u5b9e\u4f8b","text":"<pre><code>from sqlalchemy_crud_plus import CRUDPlus\n\nuser_crud = CRUDPlus(User)\npost_crud = CRUDPlus(Post)\n</code></pre>"},{"location":"getting-started/quick-start/#_7","title":"\u521b\u5efa\u8bb0\u5f55","text":"<pre><code># \u521b\u5efa\u7528\u6237\uff08\u9700\u8981\u624b\u52a8\u63d0\u4ea4\u4e8b\u52a1\uff09\nuser_data = UserCreate(name=\"\u5f20\u4e09\", email=\"zhangsan@example.com\")\nuser = await user_crud.create_model(session, user_data)\nawait session.commit()  # \u63d0\u4ea4\u4e8b\u52a1\n\n# \u6216\u8005\u4f7f\u7528 commit \u53c2\u6570\u81ea\u52a8\u63d0\u4ea4\nuser = await user_crud.create_model(session, user_data, commit=True)\n\n# \u6279\u91cf\u521b\u5efa\nusers_data = [\n    UserCreate(name=\"\u674e\u56db\", email=\"lisi@example.com\"),\n    UserCreate(name=\"\u738b\u4e94\", email=\"wangwu@example.com\")\n]\nusers = await user_crud.create_models(session, users_data)\nawait session.commit()\n\n# \u4f7f\u7528\u4e8b\u52a1\u4e0a\u4e0b\u6587\u81ea\u52a8\u7ba1\u7406\nasync with session.begin():\n    user = await user_crud.create_model(session, user_data)\n    # \u9000\u51fa with \u5757\u65f6\u81ea\u52a8\u63d0\u4ea4\u6216\u56de\u6eda\n</code></pre>"},{"location":"getting-started/quick-start/#_8","title":"\u67e5\u8be2\u8bb0\u5f55","text":"<pre><code># \u6839\u636e\u4e3b\u952e\u67e5\u8be2\nuser = await user_crud.select_model(session, pk=1)\n\n# \u6839\u636e\u5b57\u6bb5\u67e5\u8be2\nuser = await user_crud.select_model_by_column(session, email=\"zhangsan@example.com\")\n\n# \u67e5\u8be2\u591a\u4e2a\u8bb0\u5f55\nusers = await user_crud.select_models(session, is_active=True)\n\n# \u5206\u9875\u67e5\u8be2\nusers = await user_crud.select_models(session, limit=10, offset=0)\n\n# \u8fc7\u6ee4\u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    name__like=\"%\u5f20%\",\n    created_at__ge=\"2024-01-01\"\n)\n</code></pre>"},{"location":"getting-started/quick-start/#_9","title":"\u66f4\u65b0\u8bb0\u5f55","text":"<pre><code># \u6839\u636e\u4e3b\u952e\u66f4\u65b0\nupdate_data = UserUpdate(name=\"\u65b0\u540d\u79f0\")\nawait user_crud.update_model(session, pk=1, obj=update_data)\n\n# \u4f7f\u7528\u5b57\u5178\u66f4\u65b0\nawait user_crud.update_model(session, pk=1, obj={\"is_active\": False})\n\n# \u6761\u4ef6\u66f4\u65b0\nawait user_crud.update_model_by_column(\n    session,\n    obj={\"is_active\": True},\n    name=\"\u674e\u56db\"\n)\n</code></pre>"},{"location":"getting-started/quick-start/#_10","title":"\u5220\u9664\u8bb0\u5f55","text":"<pre><code># \u6839\u636e\u4e3b\u952e\u5220\u9664\nawait user_crud.delete_model(session, pk=1)\n\n# \u6761\u4ef6\u5220\u9664\nawait user_crud.delete_model_by_column(session, is_active=False)\n\n# \u903b\u8f91\u5220\u9664\uff08\u63a8\u8350\uff09\nawait user_crud.delete_model_by_column(\n    session,\n    logical_deletion=True,\n    deleted_flag_column='is_deleted',\n    allow_multiple=False,\n    pk=1\n)\n</code></pre>"},{"location":"getting-started/quick-start/#_11","title":"\u7edf\u8ba1\u67e5\u8be2","text":"<pre><code># \u7edf\u8ba1\u8bb0\u5f55\u6570\ntotal = await user_crud.count(session)\nactive_count = await user_crud.count(session, is_active=True)\n\n# \u68c0\u67e5\u8bb0\u5f55\u662f\u5426\u5b58\u5728\nexists = await user_crud.exists(session, email=\"test@example.com\")\nif not exists:\n    user = await user_crud.create_model(session, user_data)\n</code></pre>"},{"location":"getting-started/quick-start/#_12","title":"\u5173\u7cfb\u67e5\u8be2","text":"<pre><code># \u9884\u52a0\u8f7d\u5173\u7cfb\u6570\u636e\nusers = await user_crud.select_models(\n    session,\n    load_strategies=['posts']\n)\n\n# JOIN \u67e5\u8be2\nusers = await user_crud.select_models(\n    session,\n    join_conditions=['posts']\n)\n\n# \u6307\u5b9a\u52a0\u8f7d\u7b56\u7565\nuser = await user_crud.select_model(\n    session,\n    pk=1,\n    load_strategies={\n        'posts': 'selectinload'\n    }\n)\n\n# \u67e5\u8be2\u6784\u5efa\u65b9\u6cd5\nstmt = await user_crud.select(\n    User.is_active == True,\n    load_strategies=['posts']\n)\n\nstmt = await user_crud.select_order(\n    sort_columns='created_at',\n    sort_orders='desc'\n)\n</code></pre>"},{"location":"getting-started/quick-start/#_13","title":"\u9ad8\u6027\u80fd\u6279\u91cf\u64cd\u4f5c","text":"<pre><code># \u9ad8\u6027\u80fd\u6279\u91cf\u521b\u5efa\uff08\u4f7f\u7528\u5b57\u5178\uff09\nusers_dict = [\n    {\"name\": \"\u7528\u62371\", \"email\": \"user1@example.com\"},\n    {\"name\": \"\u7528\u62372\", \"email\": \"user2@example.com\"},\n    {\"name\": \"\u7528\u62373\", \"email\": \"user3@example.com\"}\n]\nusers = await user_crud.bulk_create_models(session, users_dict)\n\n# \u6279\u91cf\u66f4\u65b0\u4e0d\u540c\u6570\u636e\nusers_update = [\n    {\"id\": 1, \"name\": \"\u65b0\u540d\u79f01\", \"email\": \"new1@example.com\"},\n    {\"id\": 2, \"name\": \"\u65b0\u540d\u79f02\", \"email\": \"new2@example.com\"}\n]\nawait user_crud.bulk_update_models(session, users_update)\n</code></pre>"},{"location":"getting-started/quick-start/#_14","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom datetime import datetime\nfrom sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship\nfrom sqlalchemy import String, DateTime, Boolean, ForeignKey, func\nfrom pydantic import BaseModel\nfrom sqlalchemy_crud_plus import CRUDPlus\n\n# \u6570\u636e\u5e93\u914d\u7f6e\nDATABASE_URL = \"sqlite+aiosqlite:///./example.db\"\nengine = create_async_engine(DATABASE_URL)\nasync_session = async_sessionmaker(bind=engine, class_=AsyncSession)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# \u6a21\u578b\u5b9a\u4e49\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    email: Mapped[str] = mapped_column(String(100), unique=True)\n    is_active: Mapped[bool] = mapped_column(default=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now())\n\n    posts: Mapped[list[\"Post\"]] = relationship(back_populates=\"author\")\n\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(String(1000))\n    author_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n    created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now())\n\n    author: Mapped[User] = relationship(back_populates=\"posts\")\n\n\nclass UserCreate(BaseModel):\n    name: str\n    email: str\n\n\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n    author_id: int\n\n\nasync def main():\n    # \u521b\u5efa\u8868\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # \u521b\u5efa CRUD \u5b9e\u4f8b\n    user_crud = CRUDPlus(User)\n    post_crud = CRUDPlus(Post)\n\n    async with async_session() as session:\n        # \u521b\u5efa\u7528\u6237\n        user_data = UserCreate(name=\"\u5f20\u4e09\", email=\"zhangsan@example.com\")\n        user = await user_crud.create_model(session, user_data)\n        await session.commit()\n        print(f\"\u521b\u5efa\u7528\u6237: {user.name}\")\n\n        # \u521b\u5efa\u6587\u7ae0\n        post_data = PostCreate(\n            title=\"\u6211\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\",\n            content=\"\u8fd9\u662f\u6587\u7ae0\u5185\u5bb9\",\n            author_id=user.id\n        )\n        post = await post_crud.create_model(session, post_data)\n        await session.commit()\n        print(f\"\u521b\u5efa\u6587\u7ae0: {post.title}\")\n\n        # \u67e5\u8be2\u7528\u6237\u53ca\u5176\u6587\u7ae0\n        user_with_posts = await user_crud.select_model(\n            session,\n            pk=user.id,\n            load_strategies=['posts']\n        )\n        print(f\"\u7528\u6237 {user_with_posts.name} \u6709 {len(user_with_posts.posts)} \u7bc7\u6587\u7ae0\")\n\n        # \u7edf\u8ba1\u548c\u68c0\u67e5\n        total_users = await user_crud.count(session)\n        print(f\"\u603b\u7528\u6237\u6570: {total_users}\")\n\n        email_exists = await user_crud.exists(session, email=\"zhangsan@example.com\")\n        print(f\"\u90ae\u7bb1\u5b58\u5728: {email_exists}\")\n\n        # \u66f4\u65b0\u7528\u6237\n        update_data = UserUpdate(name=\"\u5f20\u4e09\u6539\u540d\")\n        await user_crud.update_model(session, pk=user.id, obj=update_data)\n        await session.commit()\n        print(\"\u66f4\u65b0\u7528\u6237\u540d\")\n\n        # \u903b\u8f91\u5220\u9664\u6587\u7ae0\n        await post_crud.delete_model_by_column(\n            session,\n            logical_deletion=True,\n            deleted_flag_column='deleted_at',\n            allow_multiple=False,\n            id=post.id,\n            commit=True\n        )\n        print(\"\u903b\u8f91\u5220\u9664\u6587\u7ae0\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/quick-start/#_15","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u57fa\u7840\u7528\u6cd5 - \u8be6\u7ec6\u7684 CRUD \u64cd\u4f5c</li> <li>\u8fc7\u6ee4\u6761\u4ef6 - \u8fc7\u6ee4\u64cd\u4f5c\u7b26\u8be6\u89e3</li> <li>\u5173\u7cfb\u67e5\u8be2 - \u5173\u7cfb\u67e5\u8be2\u8be6\u89e3</li> <li>\u4e8b\u52a1\u63a7\u5236 - \u4e8b\u52a1\u7ba1\u7406</li> </ul>"},{"location":"relationships/overview/","title":"\u5173\u7cfb\u67e5\u8be2","text":"<p>SQLAlchemy CRUD Plus \u63d0\u4f9b\u5f3a\u5927\u7684\u5173\u7cfb\u67e5\u8be2\u529f\u80fd\uff0c\u652f\u6301 ORM \u5173\u7cfb\u9884\u52a0\u8f7d\u548c\u52a8\u6001 JOIN \u67e5\u8be2\u3002</p>"},{"location":"relationships/overview/#_2","title":"\u6838\u5fc3\u53c2\u6570","text":"<ul> <li>load_strategies - \u5173\u7cfb\u6570\u636e\u9884\u52a0\u8f7d\u7b56\u7565\uff08\u9700\u8981 ORM relationship\uff09</li> <li>join_conditions - JOIN \u6761\u4ef6\u63a7\u5236\uff08\u652f\u6301\u6709\u65e0 relationship\uff09</li> <li>load_options - \u539f\u751f SQLAlchemy \u9009\u9879</li> </ul>"},{"location":"relationships/overview/#_3","title":"\u4e24\u79cd\u5173\u8054\u65b9\u5f0f","text":""},{"location":"relationships/overview/#orm-relationship","title":"ORM \u5173\u7cfb\uff08\u6709 relationship\uff09","text":"<p>\u4f7f\u7528 SQLAlchemy \u7684 <code>relationship</code> \u5b9a\u4e49\u5173\u7cfb\uff0c\u9002\u5408\u6807\u51c6\u7684\u5916\u952e\u5173\u8054\u3002</p> <pre><code>from sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\n\nclass User(Base):\n    __tablename__ = 'user'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    posts: Mapped[list['Post']] = relationship(back_populates='author')\n\n\nclass Post(Base):\n    __tablename__ = 'post'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    author_id: Mapped[int] = mapped_column(ForeignKey('user.id'))\n    author: Mapped['User'] = relationship(back_populates='posts')\n</code></pre> <p>\u67e5\u8be2\u793a\u4f8b\uff1a</p> <pre><code># \u9884\u52a0\u8f7d\u5173\u7cfb\u6570\u636e\nuser = await user_crud.select_model(\n    session,\n    pk=1,\n    load_strategies=['posts', 'profile']\n)\nprint(user.posts)  # \u76f4\u63a5\u8bbf\u95ee\u5173\u7cfb\n\n# JOIN \u67e5\u8be2\uff08\u7528\u4e8e\u8fc7\u6ee4\uff09\nusers = await user_crud.select_models(\n    session,\n    join_conditions=['posts'],  # \u53ea\u67e5\u8be2\u6709\u6587\u7ae0\u7684\u7528\u6237\n    is_active=True\n)\n</code></pre>"},{"location":"relationships/overview/#relationship","title":"\u7eaf\u903b\u8f91\u5173\u8054\uff08\u65e0 relationship\uff09","text":"<p>\u4e0d\u5b9a\u4e49 <code>relationship</code>\uff0c\u5728\u67e5\u8be2\u65f6\u901a\u8fc7 <code>JoinConfig</code> \u52a8\u6001\u5173\u8054\u3002\u9002\u5408\u65e0\u5916\u952e\u7ea6\u675f\u7684\u573a\u666f\u3002</p> <pre><code>class User(Base):\n    __tablename__ = 'user'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    email: Mapped[str] = mapped_column(String(100), index=True)\n\n\nclass Post(Base):\n    __tablename__ = 'post'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    author_email: Mapped[str] = mapped_column(String(100), index=True)\n</code></pre> <p>\u67e5\u8be2\u793a\u4f8b\uff1a</p> <pre><code>from sqlalchemy_crud_plus import JoinConfig\n\n# \u4f7f\u7528 JoinConfig \u52a8\u6001\u5173\u8054\nusers = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=User.email == Post.author_email,\n            join_type='inner'\n        )\n    ]\n)\n</code></pre>"},{"location":"relationships/overview/#join_conditions","title":"join_conditions","text":"<p><code>join_conditions</code> \u7528\u4e8e\u5173\u8054\u67e5\u8be2\u591a\u8868\u6570\u636e\uff0c\u652f\u6301\u4e09\u79cd\u683c\u5f0f</p>"},{"location":"relationships/overview/#relationship_1","title":"\u5217\u8868\u683c\u5f0f\uff08\u6709 relationship\uff09","text":"<pre><code># \u4f7f\u7528\u5173\u7cfb\u540d\u79f0\nusers = await user_crud.select_models(\n    session,\n    join_conditions=['posts', 'profile']\n)\n</code></pre>"},{"location":"relationships/overview/#relationship_2","title":"\u5b57\u5178\u683c\u5f0f\uff08\u6709 relationship\uff09","text":"<pre><code># \u6307\u5b9a JOIN \u7c7b\u578b\nusers = await user_crud.select_models(\n    session,\n    join_conditions={\n        'posts': 'inner',  # INNER JOIN\n        'profile': 'left'  # LEFT JOIN\n    }\n)\n</code></pre>"},{"location":"relationships/overview/#joinconfig-relationship","title":"JoinConfig\uff08\u65e0 relationship \u6216\u590d\u6742\u6761\u4ef6\uff09","text":"<p>\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u65b9\u5f0f\uff0c\u652f\u6301\u81ea\u5b9a\u4e49 JOIN \u6761\u4ef6\u3002</p>"},{"location":"relationships/overview/#_4","title":"\u57fa\u7840\u7528\u6cd5","text":"<pre><code>from sqlalchemy_crud_plus import JoinConfig\n\n# \u7b80\u5355\u5173\u8054\nresult = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=User.id == Post.author_id,\n            join_type='inner'\n        )\n    ]\n)\n</code></pre>"},{"location":"relationships/overview/#join_on","title":"join_on \u53c2\u6570","text":"<p>join_on \u5b9a\u4e49\u8868\u4e4b\u95f4\u7684\u5173\u8054\u6761\u4ef6\uff0c\u652f\u6301\uff1a</p> <ol> <li> <p>\u7b80\u5355\u7b49\u503c\u6761\u4ef6    <pre><code>JoinConfig(\n    model=Post,\n    join_on=User.id == Post.author_id,\n    join_type='left'\n)\n</code></pre></p> </li> <li> <p>\u590d\u5408\u6761\u4ef6    <pre><code>from sqlalchemy import and_, or_\n\nJoinConfig(\n    model=Post,\n    join_on=and_(\n        User.id == Post.author_id,\n        Post.is_published == True,\n        Post.created_at &gt;= datetime(2024, 1, 1)\n    ),\n    join_type='inner'\n)\n</code></pre></p> </li> <li> <p>\u591a\u79cd\u6761\u4ef6\u7ec4\u5408    <pre><code>JoinConfig(\n    model=Post,\n    join_on=and_(\n        User.id == Post.author_id,\n        or_(\n            Post.status == 'published',\n            Post.status == 'featured'\n        ),\n        Post.view_count &gt; 100\n    ),\n    join_type='left'\n)\n</code></pre></p> </li> <li> <p>\u4f7f\u7528\u51fd\u6570    <pre><code>from sqlalchemy import func\n\nJoinConfig(\n    model=Post,\n    join_on=and_(\n        User.id == Post.author_id,\n        func.date(Post.created_at) == func.current_date()\n    ),\n    join_type='inner'\n)\n</code></pre></p> </li> <li> <p>\u975e\u4e3b\u952e\u5173\u8054    <pre><code># \u901a\u8fc7 email \u5173\u8054\nJoinConfig(\n    model=Profile,\n    join_on=User.email == Profile.user_email,\n    join_type='left'\n)\n\n# \u901a\u8fc7\u4e1a\u52a1\u7f16\u53f7\u5173\u8054\nJoinConfig(\n    model=Order,\n    join_on=Customer.customer_code == Order.customer_code,\n    join_type='inner'\n)\n</code></pre></p> </li> <li> <p>\u8303\u56f4\u6761\u4ef6    <pre><code># \u67e5\u8be2\u7b26\u5408\u6298\u6263\u533a\u95f4\u7684\u8ba2\u5355\nJoinConfig(\n    model=Discount,\n    join_on=and_(\n        Order.total_amount &gt;= Discount.min_amount,\n        Order.total_amount &lt;= Discount.max_amount,\n        Discount.is_active == True\n    ),\n    join_type='left'\n)\n</code></pre></p> </li> </ol>"},{"location":"relationships/overview/#_5","title":"\u591a\u8868\u5173\u8054","text":"<pre><code># \u5173\u8054\u591a\u4e2a\u8868\nposts = await post_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=User,\n            join_on=Post.author_id == User.id,\n            join_type='inner'\n        ),\n        JoinConfig(\n            model=Category,\n            join_on=Post.category_id == Category.id,\n            join_type='left'\n        )\n    ]\n)\n</code></pre>"},{"location":"relationships/overview/#fill_result","title":"fill_result \u53c2\u6570","text":"<p>\u5f53\u8bbe\u7f6e <code>fill_result=True</code> \u65f6\uff0c\u67e5\u8be2\u7ed3\u679c\u4f1a\u5305\u542b\u5173\u8054\u8868\u7684\u6570\u636e\u3002</p> <pre><code># \u57fa\u7840\u7528\u6cd5\nresults = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=User.id == Post.author_id,\n            join_type='left',\n            fill_result=True  # \u5305\u542b\u5173\u8054\u8868\u6570\u636e\n        )\n    ]\n)\n\n# \u5f53 fill_result=True \u65f6\uff0cresults \u662f Row \u5bf9\u8c61\uff08\u884c\u4e3a\u7c7b\u4f3c\u5143\u7ec4\uff09\nfor result in results:\n    user, post = result  # (User, Post)\n    print(f\"{user.name}: {post.title if post else 'No post'}\")\n</code></pre> <p>\u591a\u8868\u5173\u8054\uff1a</p> <pre><code># \u5173\u8054\u591a\u4e2a\u8868\uff0c\u90fd\u5305\u542b\u5728\u7ed3\u679c\u4e2d\nresults = await post_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=User,\n            join_on=Post.author_id == User.id,\n            join_type='inner',\n            fill_result=True\n        ),\n        JoinConfig(\n            model=Category,\n            join_on=Post.category_id == Category.id,\n            join_type='left',\n            fill_result=True\n        )\n    ]\n)\n\n# \u7ed3\u679c\u662f\u4e09\u5143\u7ec4 (Post, User, Category) - Row \u5bf9\u8c61\nfor post, user, category in results:\n    print(f\"{post.title} by {user.name} in {category.name if category else 'Uncategorized'}\")\n</code></pre> <p>fill_result \u9ed8\u8ba4\u884c\u4e3a\uff1a</p> <pre><code># fill_result=False (\u9ed8\u8ba4) - \u53ea\u8fd4\u56de\u4e3b\u8868\u6570\u636e\nusers = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=User.id == Post.author_id,\n            join_type='left',\n            fill_result=False  # \u9ed8\u8ba4\u503c\n        )\n    ]\n)\n# users \u53ea\u5305\u542b User \u5b9e\u4f8b\n</code></pre> <p>\u9009\u62e9\u6b63\u786e\u7684\u4f7f\u7528\u65b9\u5f0f\uff1a</p> <ul> <li>\u53ea\u9700\u8981\u4e3b\u8868\u6570\u636e\uff1a\u4f7f\u7528 <code>fill_result=False</code> (\u9ed8\u8ba4)</li> <li>\u9700\u8981\u5173\u8054\u8868\u6570\u636e\uff1a\u4f7f\u7528 <code>fill_result=True</code></li> <li>\u590d\u6742\u67e5\u8be2/\u81ea\u5b9a\u4e49\u5b57\u6bb5\uff1a\u4f7f\u7528\u539f\u751f <code>select()</code></li> </ul>"},{"location":"relationships/overview/#_6","title":"\u83b7\u53d6\u5173\u8054\u8868\u6570\u636e","text":"<p>\u91cd\u8981\uff1a\u4f7f\u7528 <code>join_conditions</code> \u7684\u76ee\u7684\u662f\u83b7\u53d6\u591a\u4e2a\u8868\u7684\u6570\u636e\uff0c\u800c\u4e0d\u53ea\u662f\u4e3b\u8868\u6570\u636e\u3002</p> <pre><code>from sqlalchemy import select\n\n# \u65b9\u5f0f1\uff1a\u4f7f\u7528\u539f\u751f select \u83b7\u53d6\u591a\u8868\u6570\u636e\nstmt = select(User, Post).join(\n    Post, User.id == Post.author_id\n)\nresult = await session.execute(stmt)\nfor user, post in result.all():\n    print(f\"{user.name}: {post.title}\")\n\n# \u65b9\u5f0f2\uff1a\u4f7f\u7528 JoinConfig + fill_result\nresults = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=User.id == Post.author_id,\n            join_type='left',\n            fill_result=True  # \u5305\u542b\u5173\u8054\u8868\u6570\u636e\n        )\n    ]\n)\nfor user, post in results:\n    print(f\"{user.name}: {post.title if post else 'No post'}\")\n\n# \u65b9\u5f0f3\uff1a\u6784\u5efa\u5b57\u5178\u7ed3\u679c\uff08\u63a8\u8350\u7528\u4e8e API \u8fd4\u56de\uff09\nstmt = select(User.name, User.email, Post.title, Post.created_at).join(\n    Post, User.id == Post.author_id\n)\nresult = await session.execute(stmt)\ndata = [\n    {\n        'user_name': row.name,\n        'user_email': row.email,\n        'post_title': row.title,\n        'post_created': row.created_at\n    }\n    for row in result.all()\n]\n</code></pre>"},{"location":"relationships/overview/#_7","title":"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":"<pre><code># \u67e5\u8be2\u7528\u6237\u548c\u6587\u7ae0\u6570\u636e\nasync def get_users_with_posts(session: AsyncSession):\n    stmt = select(User, Post).join(\n        Post,\n        User.id == Post.author_id,\n        isouter=True\n    ).where(User.is_active == True)\n\n    result = await session.execute(stmt)\n    rows = result.all()\n\n    # \u7ec4\u7ec7\u6570\u636e\n    user_posts = {}\n    for user, post in rows:\n        if user.id not in user_posts:\n            user_posts[user.id] = {\n                'user': user,\n                'posts': []\n            }\n        if post:\n            user_posts[user.id]['posts'].append(post)\n\n    return list(user_posts.values())\n\n\n# \u67e5\u8be2\u591a\u8868\u6570\u636e\u7528\u4e8e API\nasync def get_post_list_api(session: AsyncSession, page: int = 1):\n    stmt = (\n        select(\n            Post.id,\n            Post.title,\n            Post.created_at,\n            User.name.label('author_name'),\n            Category.name.label('category_name')\n        )\n        .join(User, Post.author_id == User.id)\n        .join(Category, Post.category_id == Category.id, isouter=True)\n        .where(Post.is_published == True)\n        .limit(20)\n        .offset((page - 1) * 20)\n    )\n\n    result = await session.execute(stmt)\n    return [\n        {\n            'id': row.id,\n            'title': row.title,\n            'created_at': row.created_at,\n            'author': row.author_name,\n            'category': row.category_name\n        }\n        for row in result.all()\n    ]\n</code></pre>"},{"location":"relationships/overview/#join","title":"JOIN \u7c7b\u578b\u8bf4\u660e","text":"\u7c7b\u578b \u8bf4\u660e \u4f7f\u7528\u573a\u666f <code>inner</code> INNER JOIN \u53ea\u8fd4\u56de\u4e24\u8868\u90fd\u5339\u914d\u7684\u8bb0\u5f55 <code>left</code> LEFT JOIN \u8fd4\u56de\u5de6\u8868\u6240\u6709\u8bb0\u5f55\uff0c\u53f3\u8868\u53ef\u4e3a\u7a7a <code>outer</code> FULL OUTER JOIN \u8fd4\u56de\u4e24\u8868\u6240\u6709\u8bb0\u5f55"},{"location":"relationships/overview/#load_strategies","title":"load_strategies","text":"<p>Note</p> <p>\u4ec5\u7528\u4e8e\u6709 relationship \u7684\u6a21\u578b\uff0c\u9884\u52a0\u8f7d\u5173\u7cfb\u6570\u636e\u4ee5\u907f\u514d N+1 \u67e5\u8be2</p>"},{"location":"relationships/overview/#_8","title":"\u5217\u8868\u683c\u5f0f\uff08\u4f7f\u7528\u9ed8\u8ba4\u7b56\u7565\uff09","text":"<pre><code>user = await user_crud.select_model(\n    session,\n    pk=1,\n    load_strategies=['posts', 'profile']\n)\n</code></pre>"},{"location":"relationships/overview/#_9","title":"\u5b57\u5178\u683c\u5f0f\uff08\u6307\u5b9a\u7b56\u7565\uff09","text":"<pre><code>user = await user_crud.select_model(\n    session,\n    pk=1,\n    load_strategies={\n        'posts': 'selectinload',\n        'profile': 'joinedload',\n        'roles': 'subqueryload'\n    }\n)\n</code></pre>"},{"location":"relationships/overview/#n1","title":"\u907f\u514d N+1 \u67e5\u8be2","text":"<pre><code># \u9519\u8bef\uff1aN+1 \u67e5\u8be2\nusers = await user_crud.select_models(session, limit=10)\nfor user in users:\n    print(len(user.posts))  # \u6bcf\u6b21\u90fd\u89e6\u53d1\u67e5\u8be2\n\n# \u6b63\u786e\uff1a\u9884\u52a0\u8f7d\nusers = await user_crud.select_models(\n    session,\n    load_strategies=['posts'],\n    limit=10\n)\nfor user in users:\n    print(len(user.posts))  # \u65e0\u989d\u5916\u67e5\u8be2\n</code></pre>"},{"location":"relationships/overview/#_10","title":"\u7ec4\u5408\u4f7f\u7528","text":""},{"location":"relationships/overview/#join_1","title":"JOIN \u8fc7\u6ee4 + \u9884\u52a0\u8f7d\u6570\u636e","text":"<pre><code># \u67e5\u8be2\u6709\u6587\u7ae0\u7684\u7528\u6237\uff0c\u5e76\u9884\u52a0\u8f7d\u5176\u6570\u636e\nusers = await user_crud.select_models(\n    session,\n    join_conditions=['posts'],  # \u8fc7\u6ee4\uff1a\u53ea\u8981\u6709\u6587\u7ae0\u7684\u7528\u6237\n    load_strategies=['posts', 'profile'],  # \u9884\u52a0\u8f7d\u6570\u636e\n    is_active=True\n)\n</code></pre>"},{"location":"relationships/overview/#_11","title":"\u590d\u6742\u7ec4\u5408","text":"<pre><code>users = await user_crud.select_models(\n    session,\n    join_conditions=[\n        JoinConfig(\n            model=Post,\n            join_on=and_(\n                User.id == Post.author_id,\n                Post.view_count &gt; 100\n            ),\n            join_type='inner'\n        )\n    ],\n    load_strategies={\n        'posts': 'selectinload',\n        'profile': 'joinedload'\n    },\n    is_active=True,\n    name__like='%admin%',\n    limit=20\n)\n</code></pre>"},{"location":"relationships/overview/#_12","title":"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"relationships/overview/#_13","title":"\u7528\u6237\u8be6\u60c5\u9875\u9762","text":"<pre><code>async def get_user_detail(session: AsyncSession, user_id: int):\n    return await user_crud.select_model(\n        session,\n        pk=user_id,\n        load_strategies={\n            'posts': 'selectinload',\n            'profile': 'joinedload',\n            'roles': 'selectinload'\n        }\n    )\n</code></pre>"},{"location":"relationships/overview/#_14","title":"\u6587\u7ae0\u5217\u8868\uff08\u591a\u8868\u6570\u636e\uff09","text":"<pre><code>async def get_posts_with_details(session: AsyncSession):\n    stmt = (\n        select(Post, User, Category)\n        .join(User, Post.author_id == User.id)\n        .join(Category, Post.category_id == Category.id, isouter=True)\n        .where(Post.is_published == True)\n    )\n\n    result = await session.execute(stmt)\n    return [\n        {\n            'post': post,\n            'author': user,\n            'category': category\n        }\n        for post, user, category in result.all()\n    ]\n</code></pre>"},{"location":"relationships/overview/#_15","title":"\u7edf\u8ba1\u67e5\u8be2","text":"<pre><code>async def get_active_authors(session: AsyncSession):\n    # \u67e5\u8be2\u6709\u5df2\u53d1\u5e03\u6587\u7ae0\u7684\u4f5c\u8005\n    authors = await user_crud.select_models(\n        session,\n        join_conditions=[\n            JoinConfig(\n                model=Post,\n                join_on=and_(\n                    User.id == Post.author_id,\n                    Post.is_published == True\n                ),\n                join_type='inner'\n            )\n        ],\n        is_active=True\n    )\n    return authors\n</code></pre>"},{"location":"relationships/overview/#_16","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"relationships/overview/#_17","title":"\u7d22\u5f15\u4f18\u5316","text":"<pre><code># \u4e3a\u5173\u8054\u5b57\u6bb5\u6dfb\u52a0\u7d22\u5f15\nclass Post(Base):\n    __tablename__ = 'post'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    author_id: Mapped[int] = mapped_column(index=True)  # \u6dfb\u52a0\u7d22\u5f15\n    author_email: Mapped[str] = mapped_column(String(100), index=True)  # \u6dfb\u52a0\u7d22\u5f15\n</code></pre>"},{"location":"relationships/overview/#join_2","title":"\u9009\u62e9\u5408\u9002\u7684 JOIN \u7c7b\u578b","text":"<pre><code># INNER JOIN - \u53ea\u8981\u5339\u914d\u7684\nusers = await user_crud.select_models(\n    session,\n    join_conditions={'posts': 'inner'}  # \u53ea\u8fd4\u56de\u6709\u6587\u7ae0\u7684\u7528\u6237\n)\n\n# LEFT JOIN - \u4fdd\u7559\u4e3b\u8868\u6240\u6709\u8bb0\u5f55\nusers = await user_crud.select_models(\n    session,\n    join_conditions={'posts': 'left'}  # \u8fd4\u56de\u6240\u6709\u7528\u6237\uff0c\u5305\u62ec\u6ca1\u6587\u7ae0\u7684\n)\n</code></pre>"},{"location":"relationships/overview/#_18","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li> <p>\u6839\u636e\u573a\u666f\u9009\u62e9\u65b9\u5f0f</p> <ul> <li>\u6709\u5916\u952e + \u6807\u51c6\u5173\u7cfb \u2192 \u4f7f\u7528 <code>load_strategies</code></li> <li>\u65e0\u5916\u952e\u6216\u590d\u6742\u6761\u4ef6 \u2192 \u4f7f\u7528 <code>JoinConfig</code></li> </ul> </li> <li> <p>\u5173\u8054\u67e5\u8be2\u83b7\u53d6\u591a\u8868\u6570\u636e</p> <ul> <li>\u4f7f\u7528\u539f\u751f <code>select(Model1, Model2).join()</code> \u83b7\u53d6\u591a\u8868\u6570\u636e</li> <li>\u6784\u5efa\u5b57\u5178\u7ed3\u679c\u7528\u4e8e API \u8fd4\u56de</li> <li><code>JoinConfig</code> \u4e3b\u8981\u7528\u4e8e\u8fc7\u6ee4\uff0c\u4e0d\u76f4\u63a5\u8fd4\u56de\u5173\u8054\u8868\u6570\u636e</li> </ul> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> <ul> <li>\u4e3a\u5173\u8054\u5b57\u6bb5\u6dfb\u52a0\u7d22\u5f15</li> <li>\u9884\u52a0\u8f7d\u907f\u514d N+1 \u67e5\u8be2</li> <li>\u5408\u7406\u9009\u62e9 JOIN \u7c7b\u578b</li> </ul> </li> <li> <p>\u5b57\u6bb5\u547d\u540d</p> <ul> <li>\u4e3b\u952e\u5173\u8054\uff1a<code>user_id</code>\uff08\u6574\u6570\uff09</li> <li>\u4e1a\u52a1\u5b57\u6bb5\u5173\u8054\uff1a<code>user_email</code>\u3001<code>customer_code</code>\uff08\u8bed\u4e49\u5316\uff09</li> </ul> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> <ul> <li>\u68c0\u67e5\u5173\u8054\u5b57\u6bb5\u662f\u5426\u6709\u7d22\u5f15</li> <li>\u9a8c\u8bc1 JOIN \u6761\u4ef6\u7684\u6b63\u786e\u6027</li> <li>\u5904\u7406\u5173\u8054\u6570\u636e\u4e3a\u7a7a\u7684\u60c5\u51b5</li> </ul> </li> </ol>"},{"location":"relationships/overview/#load_options","title":"load_options","text":"<p>\u4f7f\u7528\u539f\u751f SQLAlchemy \u9009\u9879\u8fdb\u884c\u7cbe\u786e\u63a7\u5236\uff1a</p> <pre><code>from sqlalchemy.orm import selectinload, joinedload\n\n# \u5d4c\u5957\u5173\u7cfb\nuser = await user_crud.select_model(\n    session,\n    pk=1,\n    load_options=[\n        selectinload(User.posts).selectinload(Post.comments)\n    ]\n)\n</code></pre>"},{"location":"relationships/overview/#_19","title":"\u76f8\u5173\u8d44\u6e90","text":"<ul> <li>\u8fc7\u6ee4\u6761\u4ef6 - \u9ad8\u7ea7\u8fc7\u6ee4\u6280\u672f</li> <li>\u4e8b\u52a1\u63a7\u5236 - \u4e8b\u52a1\u7ba1\u7406</li> <li>API \u53c2\u8003 - \u5b8c\u6574 API \u6587\u6863</li> </ul>"},{"location":"usage/crud/","title":"\u57fa\u7840\u7528\u6cd5","text":"<p>SQLAlchemy CRUD Plus \u63d0\u4f9b\u5b8c\u6574\u7684 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u64cd\u4f5c\u3002</p>"},{"location":"usage/crud/#_2","title":"\u521b\u5efa\u64cd\u4f5c","text":""},{"location":"usage/crud/#_3","title":"\u521b\u5efa\u5355\u6761\u8bb0\u5f55","text":"<pre><code># \u4f7f\u7528 Pydantic \u6a21\u578b\nuser_data = UserCreate(name=\"\u5f20\u4e09\", email=\"zhangsan@example.com\")\nuser = await user_crud.create_model(session, user_data)\n\n# \u4f7f\u7528\u5b57\u5178\nuser = await user_crud.create_model(session, {\"name\": \"\u674e\u56db\", \"email\": \"lisi@example.com\"})\n\n# \u7acb\u5373\u63d0\u4ea4\nuser = await user_crud.create_model(session, user_data, commit=True)\n\n# \u83b7\u53d6\u4e3b\u952e\uff08\u4e0d\u63d0\u4ea4\u4e8b\u52a1\uff09\nuser = await user_crud.create_model(session, user_data, flush=True)\nprint(f\"\u7528\u6237ID: {user.id}\")  # \u53ef\u4ee5\u7acb\u5373\u83b7\u53d6\u4e3b\u952e\n</code></pre>"},{"location":"usage/crud/#_4","title":"\u6279\u91cf\u521b\u5efa","text":"<pre><code># \u6279\u91cf\u521b\u5efa\nusers_data = [\n    UserCreate(name=\"\u7528\u62371\", email=\"user1@example.com\"),\n    UserCreate(name=\"\u7528\u62372\", email=\"user2@example.com\"),\n    UserCreate(name=\"\u7528\u62373\", email=\"user3@example.com\")\n]\nusers = await user_crud.create_models(session, users_data)\n\n# \u4f7f\u7528\u5b57\u5178\u6279\u91cf\u521b\u5efa\uff08\u9ad8\u6027\u80fd\u65b9\u5f0f\uff09\nusers_dict = [\n    {\"name\": \"\u7528\u62374\", \"email\": \"user4@example.com\"},\n    {\"name\": \"\u7528\u62375\", \"email\": \"user5@example.com\"}\n]\nusers = await user_crud.bulk_create_models(session, users_dict)\n</code></pre>"},{"location":"usage/crud/#_5","title":"\u67e5\u8be2\u64cd\u4f5c","text":""},{"location":"usage/crud/#_6","title":"\u4e3b\u952e\u67e5\u8be2","text":"<pre><code># \u6839\u636e\u4e3b\u952e\u67e5\u8be2\nuser = await user_crud.select_model(session, pk=1)\n\n# \u590d\u5408\u4e3b\u952e\u67e5\u8be2\nuser_role = await user_role_crud.select_model(session, pk=(1, 2))\n\n# \u7ed3\u5408\u6761\u4ef6\u67e5\u8be2\nuser = await user_crud.select_model(\n    session,\n    pk=1,\n    is_active=True  # \u989d\u5916\u6761\u4ef6\n)\n</code></pre>"},{"location":"usage/crud/#_7","title":"\u6761\u4ef6\u67e5\u8be2","text":"<pre><code># \u6839\u636e\u5b57\u6bb5\u67e5\u8be2\u5355\u6761\u8bb0\u5f55\nuser = await user_crud.select_model_by_column(session, email=\"zhangsan@example.com\")\n\n# \u67e5\u8be2\u591a\u6761\u8bb0\u5f55\nusers = await user_crud.select_models(session, is_active=True)\n\n# \u5206\u9875\u67e5\u8be2\nusers = await user_crud.select_models(session, limit=10, offset=20)\n</code></pre>"},{"location":"usage/crud/#_8","title":"\u6392\u5e8f\u67e5\u8be2","text":"<pre><code># \u5355\u5217\u6392\u5e8f\nusers = await user_crud.select_models_order(\n    session,\n    sort_columns=\"created_at\",\n    sort_orders=\"desc\"\n)\n\n# \u591a\u5217\u6392\u5e8f\nusers = await user_crud.select_models_order(\n    session,\n    sort_columns=[\"name\", \"created_at\"],\n    sort_orders=[\"asc\", \"desc\"]\n)\n\n# \u7ed3\u5408\u6761\u4ef6\u548c\u5206\u9875\nusers = await user_crud.select_models_order(\n    session,\n    sort_columns=\"created_at\",\n    sort_orders=\"desc\",\n    is_active=True,\n    limit=10\n)\n</code></pre>"},{"location":"usage/crud/#_9","title":"\u7edf\u8ba1\u67e5\u8be2","text":"<pre><code># \u7edf\u8ba1\u603b\u6570\ntotal = await user_crud.count(session)\n\n# \u6761\u4ef6\u7edf\u8ba1\nactive_count = await user_crud.count(session, is_active=True)\n\n# \u68c0\u67e5\u662f\u5426\u5b58\u5728\nexists = await user_crud.exists(session, email=\"test@example.com\")\nif not exists:\n    # \u4e0d\u5b58\u5728\u5219\u521b\u5efa\n    user = await user_crud.create_model(session, user_data)\n</code></pre>"},{"location":"usage/crud/#_10","title":"\u66f4\u65b0\u64cd\u4f5c","text":""},{"location":"usage/crud/#_11","title":"\u4e3b\u952e\u66f4\u65b0","text":"<pre><code># \u4f7f\u7528\u5b57\u5178\u66f4\u65b0\nawait user_crud.update_model(session, pk=1, obj={\"name\": \"\u65b0\u540d\u79f0\"})\n\n# \u4f7f\u7528 Pydantic \u6a21\u578b\u66f4\u65b0\nuser_update = UserUpdate(name=\"\u65b0\u540d\u79f0\", email=\"new@example.com\")\nawait user_crud.update_model(session, pk=1, obj=user_update)\n\n# \u7acb\u5373\u63d0\u4ea4\nawait user_crud.update_model(session, pk=1, obj={\"name\": \"\u65b0\u540d\u79f0\"}, commit=True)\n\n# \u590d\u5408\u4e3b\u952e\u66f4\u65b0\nawait user_role_crud.update_model(\n    session,\n    pk=(1, 2),\n    obj={\"assigned_at\": datetime.now()}\n)\n</code></pre>"},{"location":"usage/crud/#_12","title":"\u6279\u91cf\u66f4\u65b0\uff08\u4e0d\u540c\u6570\u636e\uff09","text":"<pre><code># \u4f7f\u7528 bulk_update_models \u6279\u91cf\u66f4\u65b0\u4e0d\u540c\u7684\u6570\u636e\nusers_update = [\n    {\"id\": 1, \"name\": \"\u5f20\u4e09\u4e09\", \"email\": \"zhangsan_new@example.com\"},\n    {\"id\": 2, \"name\": \"\u674e\u56db\u56db\", \"email\": \"lisi_new@example.com\"}\n]\nawait user_crud.bulk_update_models(session, users_update)\n</code></pre>"},{"location":"usage/crud/#_13","title":"\u6761\u4ef6\u66f4\u65b0\uff08\u76f8\u540c\u6570\u636e\uff09","text":"<pre><code># \u6839\u636e\u6761\u4ef6\u66f4\u65b0\u5355\u6761\u8bb0\u5f55\nawait user_crud.update_model_by_column(\n    session,\n    obj={\"is_active\": False},\n    email=\"user@example.com\"\n)\n\n# \u6279\u91cf\u66f4\u65b0\u76f8\u540c\u6570\u636e\nawait user_crud.update_model_by_column(\n    session,\n    obj={\"last_login\": datetime.now()},\n    allow_multiple=True,\n    is_active=True\n)\n</code></pre>"},{"location":"usage/crud/#_14","title":"\u5220\u9664\u64cd\u4f5c","text":""},{"location":"usage/crud/#_15","title":"\u4e3b\u952e\u5220\u9664","text":"<pre><code># \u6839\u636e\u4e3b\u952e\u5220\u9664\ndeleted_count = await user_crud.delete_model(session, pk=1)\n\n# \u590d\u5408\u4e3b\u952e\u5220\u9664\ndeleted_count = await user_role_crud.delete_model(session, pk=(1, 2))\n\n# \u7acb\u5373\u63d0\u4ea4\nawait user_crud.delete_model(session, pk=1, commit=True)\n</code></pre>"},{"location":"usage/crud/#_16","title":"\u6761\u4ef6\u5220\u9664","text":"<pre><code># \u6839\u636e\u6761\u4ef6\u5220\u9664\ndeleted_count = await user_crud.delete_model_by_column(\n    session,\n    name='\u5f20\u4e09'\n)\n\n# \u6279\u91cf\u5220\u9664\ndeleted_count = await user_crud.delete_model_by_column(\n    session,\n    allow_multiple=True,\n    created_at__lt=datetime.now() - timedelta(days=30)\n)\n\n# \u903b\u8f91\u5220\u9664\uff08\u8f6f\u5220\u9664\uff09\ndeleted_count = await user_crud.delete_model_by_column(\n    session,\n    logical_deletion=True,  # \u542f\u7528\u903b\u8f91\u5220\u9664\n    allow_multiple=False,\n    id=1\n)\n</code></pre>"},{"location":"usage/crud/#_17","title":"\u4e8b\u52a1\u63a7\u5236","text":""},{"location":"usage/crud/#_18","title":"\u81ea\u52a8\u4e8b\u52a1\u7ba1\u7406","text":"<pre><code># \u63a8\u8350\u7684\u4e8b\u52a1\u6a21\u5f0f\nasync with async_session.begin() as session:\n    # \u6240\u6709\u64cd\u4f5c\u5728\u540c\u4e00\u4e8b\u52a1\u4e2d\n    user = await user_crud.create_model(session, user_data)\n    profile = await profile_crud.create_model(session, profile_data)\n    # \u81ea\u52a8\u63d0\u4ea4\u6216\u56de\u6eda\n</code></pre>"},{"location":"usage/crud/#flush-commit","title":"\u4f7f\u7528 flush \u548c commit","text":"<pre><code>async with async_session() as session:\n    # \u521b\u5efa\u7528\u6237\u5e76\u7acb\u5373\u83b7\u53d6\u4e3b\u952e\n    user = await user_crud.create_model(session, user_data, flush=True)\n\n    # \u4f7f\u7528\u83b7\u53d6\u5230\u7684\u4e3b\u952e\u521b\u5efa\u5173\u8054\u8bb0\u5f55\n    profile_data.user_id = user.id\n    profile = await profile_crud.create_model(session, profile_data)\n\n    # \u624b\u52a8\u63d0\u4ea4\n    await session.commit()\n</code></pre>"},{"location":"usage/crud/#_19","title":"\u5b9e\u7528\u793a\u4f8b","text":""},{"location":"usage/crud/#_20","title":"\u5206\u9875\u67e5\u8be2\u5b9e\u73b0","text":"<pre><code>async def get_users_paginated(\n        session: AsyncSession,\n        page: int = 1,\n        page_size: int = 20,\n        **filters\n):\n    offset = (page - 1) * page_size\n\n    # \u67e5\u8be2\u6570\u636e\n    users = await user_crud.select_models(\n        session,\n        **filters,\n        limit=page_size,\n        offset=offset\n    )\n\n    # \u7edf\u8ba1\u603b\u6570\n    total = await user_crud.count(session, **filters)\n\n    return {\n        'items': users,\n        'total': total,\n        'page': page,\n        'page_size': page_size,\n        'total_pages': (total + page_size - 1) // page_size\n    }\n</code></pre>"},{"location":"usage/crud/#_21","title":"\u5b89\u5168\u7684\u67e5\u8be2\u64cd\u4f5c","text":"<pre><code>async def get_user_safely(session: AsyncSession, user_id: int):\n    \"\"\"\u5b89\u5168\u83b7\u53d6\u7528\u6237\uff0c\u5904\u7406\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\"\"\"\n    user = await user_crud.select_model(session, pk=user_id)\n    if not user:\n        raise ValueError(f\"\u7528\u6237 {user_id} \u4e0d\u5b58\u5728\")\n    return user\n\n\nasync def get_or_create_user(session: AsyncSession, email: str, name: str):\n    \"\"\"\u83b7\u53d6\u7528\u6237\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\"\"\"\n    user = await user_crud.select_model_by_column(session, email=email)\n    if not user:\n        user_data = UserCreate(name=name, email=email)\n        user = await user_crud.create_model(session, user_data)\n    return user\n</code></pre>"},{"location":"usage/crud/#_22","title":"\u67e5\u8be2\u6784\u5efa\u65b9\u6cd5","text":"<pre><code># \u4f7f\u7528 select \u65b9\u6cd5\u6784\u5efa\u67e5\u8be2\nstmt = await user_crud.select(\n    User.is_active == True,\n    load_strategies=['posts'],\n    name__like='%\u5f20%'\n)\n\n# \u4f7f\u7528 select_order \u65b9\u6cd5\u6784\u5efa\u6392\u5e8f\u67e5\u8be2  \nstmt = await user_crud.select_order(\n    sort_columns=['name', 'created_at'],\n    sort_orders=['asc', 'desc'],\n    is_active=True\n)\n</code></pre>"},{"location":"usage/crud/#_23","title":"\u6279\u91cf\u64cd\u4f5c\u793a\u4f8b","text":"<pre><code>async def batch_update_users(session: AsyncSession, user_updates: list[dict]):\n    \"\"\"\u6279\u91cf\u66f4\u65b0\u7528\u6237\uff08\u4f7f\u7528\u9ad8\u6027\u80fd\u6279\u91cf\u66f4\u65b0\uff09\"\"\"\n    # \u65b9\u5f0f1\uff1a\u6279\u91cf\u66f4\u65b0\u4e0d\u540c\u6570\u636e\n    return await user_crud.bulk_update_models(session, user_updates)\n\n\nasync def batch_update_same_data(session: AsyncSession, update_data: dict, **filters):\n    \"\"\"\u6279\u91cf\u66f4\u65b0\u76f8\u540c\u6570\u636e\"\"\"\n    # \u65b9\u5f0f2\uff1a\u6761\u4ef6\u66f4\u65b0\u76f8\u540c\u6570\u636e\n    return await user_crud.update_model_by_column(\n        session,\n        obj=update_data,\n        **filters\n    )\n</code></pre>"},{"location":"usage/crud/#_24","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u4e3b\u952e\u53c2\u6570: \u7531\u4e8e <code>id</code> \u662f Python \u5173\u952e\u5b57\uff0c\u4e3b\u952e\u53c2\u6570\u4f7f\u7528 <code>pk</code></li> <li>\u4e8b\u52a1\u7ba1\u7406: \u63a8\u8350\u4f7f\u7528 <code>async with session.begin()</code> \u81ea\u52a8\u7ba1\u7406\u4e8b\u52a1</li> <li>flush vs commit: <code>flush</code> \u7528\u4e8e\u83b7\u53d6\u4e3b\u952e\uff0c<code>commit</code> \u7528\u4e8e\u7acb\u5373\u63d0\u4ea4</li> <li>\u590d\u5408\u4e3b\u952e: \u4f7f\u7528\u5143\u7ec4\u683c\u5f0f\uff0c\u5982 <code>pk=(1, 2)</code></li> <li>\u9519\u8bef\u5904\u7406: \u67e5\u8be2\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\u8fd4\u56de <code>None</code>\uff0c\u5220\u9664\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\u8fd4\u56de <code>0</code></li> <li>\u6279\u91cf\u64cd\u4f5c: \u5927\u91cf\u6570\u636e\u64cd\u4f5c\u65f6\u4f18\u5148\u4f7f\u7528 <code>bulk_*</code> \u65b9\u6cd5</li> </ol>"},{"location":"usage/crud/#_25","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u8fc7\u6ee4\u6761\u4ef6 - \u5b66\u4e60\u8fc7\u6ee4\u64cd\u4f5c\u7b26</li> <li>\u5173\u7cfb\u67e5\u8be2 - \u5904\u7406\u8868\u5173\u7cfb</li> <li>\u4e8b\u52a1\u63a7\u5236 - \u6df1\u5165\u4e8b\u52a1\u7ba1\u7406</li> </ul>"}]}